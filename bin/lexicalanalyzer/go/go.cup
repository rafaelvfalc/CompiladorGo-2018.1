package lexicalanalyzer.go;

import java_cup.runtime.*;

parser code {:

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left  == 0) {
                m.append(" in line "+(s.left));
                if (s.right  == 0)
                    m.append(", column "+(s.right));
            }
        }

        m.append(" : "+message);

        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

// Terminais

terminal BREAK, CASE, CHAN, CONST, CONTINUE, DEFAULT;
terminal DEFER, ELSE, FALLTHROUGH, FOR, FUNC, GO, GOTO;
terminal IF, IMPORT, INTERFACE, MAP, PACKAGE, RANGE, RETURN;
terminal SELECT, STRUCT, SWITCH, TYPE, VAR, BOOL;
terminal STRING, INT, INT8, INT16, INT32, INT64;
terminal UINT, UINT8, UINT16, UINT32, UINT64, UINTPTR;
terminal BYTE, RUNE, FLOAT32, FLOAT64, COMPLEX64;
terminal COMPLEX128, TRUE, FALSE, LPAREN, RPAREN;
terminal LBRACE, RBRACE, LBRACK, RBRACK, SEMICOLON;
terminal COMMA, DOT, COLON, EQUAL, GREATER, LESS;
terminal NOT, EQEQ, LTEQ, GTEQ, NOTEQ, ANDAND, OROR;
terminal PLUSPLUS, MINUSMINUS, PLUS, MINUS, MULT, DIV;
terminal AND, OR, XOR, MOD, LSHIFT, RSHIFT, PLUSEQ;
terminal MINUSEQ, MULTEQ, DIVEQ, ANDEQ, OREQ, XOREQ;
terminal MODEQ, LSHIFTEQ, RSHIFTEQ, ID, NUMERO, COMENTARIO;
terminal a , b , c , d , e , f , A , B , C , D , E , F, x; 
terminal X, l, input_character, escape_character, except; 
terminal STRING_LITERAL, INTEGER_LITERAL, FLOAT_LITERAL;
terminal UNDERSCORE;

// Nao terminais TO-DO

non terminal letter, float_lit, decimals, exponent, e_exponent, plus_or_minus, string_lit, string_characters, string_character;
non terminal type, type_name, package_name, qualified_ident, type_lit, array_type, struct_type, pointer_type, function_type;
non terminal interface_type, slice_type, map_type, channel_type, array_length, element_type, expression;
non terminal unary_expr, binary_op, primary_expr, unary_op, rel_op, add_op, mul_op, identifier_list, embedded_field, tag;
non terminal field_decl, field_decl_2, tag_2, mult_2, base_type, signature, parameters, comma_2, parameter_list_2, result;
non terminal result_2, parameter_list, parameter_decl, identifier_list_2, method_spec, method_name, interface_type_name;
non terminal key_type, block, statement_list, statement, declaration, labeled_stmt, simple_stmt, go_stmt, return_stmt;
non terminal break_stmt, continue_stmt, goto_stmt, fallthrough_stmt, if_stmt, switch_stmt, select_stmt, for_stmt;
non terminal defer_stmt, empty_stmt, expression_stmt, send_stmt, inc_dec_stmt, assignment, short_var_decl, label;
non terminal channel, assign_op, expression_list, simple_stmt_2, else_2, expr_switch_stmt, expression_2, expr_case_clause;
non terminal expr_switch_case, mul_op_2, add_op_2, type_switch_stmt, type_switch_guard, type_case_clause, id_2;
non terminal type_switch_case, type_list, condition, for_clause, init_stmt, post_stmt, init_stmt_2, condition_2, post_stmt_2;
non terminal range_clause, expression_list_2, comm_clause, comm_case, recv_stmt, recv_expr, expression_list_3, label_2;
non terminal condition_3, const_decl, const_spec, type_2, type_3, type_decl, type_spec, alias_decl, type_def, var_spec;
non terminal var_decl, equal_2, function_decl, function_name, function_body, function_body_2, method_decl, receiver;
non terminal top_level_decl, operand, literal, basic_lit, decimal_lit, int_lit, composite_lit, literal_type, literal_value;
non terminal comma_1, element_list_1, element_list, keyed_element, key_2, element, key, field_name, operand_name, function_lit;
non terminal conversion, receiver_type, method_expr, selector, index, slice, type_assertion, comma_3, expression_list_4, arguments;
non terminal package_clause, import_path, dot_2, import_spec, import_decl, source_file, compilation_unit, package_clause_aux;
non terminal identifier, import_decl_e, import_decl_aux;

start with compilation_unit;

// Compilation Unit

compilation_unit ::= package_clause_aux:p import_decl_aux:i;				 

// Identifier

identifier ::= ID:id {:RESULT = id;:};

// Floating-point literals

decimals ::= NUMERO;
e_exponent ::= e | E;
plus_or_minus ::= PLUS | MINUS;
exponent ::= e_exponent plus_or_minus decimals;

// Integer Literals
// Conferir com Franklin se precisa adicionar Octal, Hexa
int_lit ::= decimal_lit;
decimal_lit ::= decimals { decimals };

// Checar regra abaixo
float_lit ::= decimals DOT decimals exponent | decimals exponent | DOT decimals exponent;

// String literals (Checar se funciona)

string_lit ::= "string_characters" | `string_characters`;
string_characters ::= string_character | string_characters string_character |;
string_character ::= input_character except " AND \ | escape_character;

// Types

type ::= type_name | type_lit | LPAREN type RPAREN;
type_name ::= ID | qualified_ident;
type_lit ::= array_type | struct_type | pointer_type | function_type | interface_type | slice_type | map_type | channel_type;

// Array Types

array_type ::= LBRACK array_length RBRACK element_type;
array_length ::= expression;
element_type ::= type;

// Slice types

slice_type ::= LBRACK  RBRACK element_type;

// Struct types

struct_type ::= STRUCT LBRACE { field_decl SEMICOLON } RBRACE;
// Checar se esta certo
field_decl ::= field_decl_2 tag_2;
field_decl_2 ::= identifier_list type | embedded_field;
tag_2 ::= tag | ;
embedded_field ::= mult_2 type_name;
mult_2 ::= MULT | ;
tag ::= string_lit;

// Pointer types

pointer_type ::= MULT base_type;
base_type ::= type;

// Function types

function_type ::= FUNC signature;
signature ::= parameters result_2;
result ::= parameters | type;
result_2 ::= result | ; 
parameters ::= LPAREN parameter_list_2 RPAREN;
parameter_list_2 ::= parameter_list | comma_2;
comma_2 ::= COMMA | ;
parameter_list ::= parameter_decl { COMMA parameter_decl };
// LEMBRAR: adicionar "..." abaixo
parameter_decl ::= identifier_list_2 type;
identifier_list_2 ::= identifier_list | ;

// Interface Types

interface_type ::= INTERFACE LBRACE { method_spec SEMICOLON } RBRACE;
method_spec ::= method_name signature | interface_type_name;
method_name ::= ID;
interface_type_name ::= type_name;

// Map types

map_type ::= MAP LBRACK key_type RBRACK element_type;
key_type ::= type;

// Channel types
// LEMBRAR: Adicionar "<-" na regra abaixo
channel_type ::= CHAN element_type;

// Blocks

block ::= LBRACE statement_list RBRACE;
statement_list ::= { statement SEMICOLON };

// Declarations and scope

declaration ::= const_decl | type_decl | var_decl;
top_level_decl ::= declaration | function_decl | method_decl;

// Constant declarations

const_decl ::= CONST ( const_spec | LPAREN { const_spec SEMICOLON } RPAREN );
const_spec ::= identifier_list type_3;
type_2 ::= type | ;
type_3 ::= type_2 | EQUAL | expression_list;

identifier_list ::= ID { COMMA ID };
expression_list ::= expression { COMMA expression };

// Type declarations

type_decl ::= TYPE ( type_spec | LPAREN { type_spec SEMICOLON } RPAREN );
type_spec ::= alias_decl | type_def;

// Alias declarations

alias_decl ::= ID EQUAL type;

// Type definitions

type_def ::= ID type;

// Variable declarations

var_decl ::= VAR ( var_spec | LPAREN { var_spec SEMICOLON } RPAREN );
var_spec ::= identifier_list ( type equal_2 | EQUAL expression_list );
equal_2 ::= EQUAL | expression_list | ; 

// Short variable declarations
// Lembrar: Adicionar ":=" a essa regra
short_var_decl ::= identifier_list expression_list;

// Function declarations

function_decl ::= FUNC function_name signature function_body_2 ;
function_body_2 ::= function_body | ;
function_name ::= ID;
function_body ::= block;

// Method declarations

method_decl ::= FUNC receiver method_name signature function_body_2 ;
receiver ::= parameters;

// Operands

operand ::= literal | operand_name | LPAREN expression RPAREN;
literal ::= basic_lit | composite_lit | function_lit;
//Lembrar depois de adicionar 'imaginary_lit' e 'rune_lit' na regra abaixo se necessario.
basic_lit ::= int_lit | float_lit | string_lit;
operand_name ::= ID | qualified_ident;
        
// Qualified identifiers

qualified_ident ::= package_name DOT ID;

// Composite literals

composite_lit ::= literal_type literal_value;
// Lembrar de adicionar "..." na regra abaixo
literal_type ::= struct_type | array_type | LBRACK  RBRACK element_type | slice_type | map_type | type_name;
literal_value ::= LBRACE element_list_1 RBRACE;
comma_1 ::= COMMA | ;
element_list_1 ::= element_list | comma_1;
element_list ::= keyed_element { COMMA keyed_element };
keyed_element ::= key_2  element;
key_2 ::= key | COLON | ;
key ::= field_name | expression | literal_value;
field_name ::= ID;
element ::= expression | literal_value;

// Function literals

function_lit ::= FUNC signature function_body;

// Primary expressions

primary_expr ::= operand | conversion | method_expr | primary_expr selector | primary_expr index | primary_expr slice | primary_expr type_assertion | primary_expr arguments;

selector ::= DOT ID;
index ::= LBRACK expression RBRACK;
slice ::= LBRACK expression_2 COLON expression_2 RBRACK | LBRACK expression_2 COLON expression COLON expression RBRACK;

type_assertion ::= DOT LPAREN type RPAREN;
// Lembrar de adicionar "..." na regra abaixo.
arguments ::= LPAREN expression_list_4 RPAREN;
comma_3 ::= COMMA | expression_list | ;
expression_list_4 ::= (expression_list | type comma_3) | comma_2 | ;

// Method expressions

method_expr ::= receiver_type DOT method_name;
receiver_type ::= type;

// Operators

expression ::= unary_expr | expression binary_op expression;
unary_expr ::= primary_expr | unary_op unary_expr;

binary_op ::= OROR | ANDAND | rel_op | add_op | mul_op;
rel_op ::= EQEQ | NOTEQ | LESS | LTEQ | GREATER | GTEQ;
add_op ::= PLUS | MINUS | OR | XOR;
// LEMBRAR: Adicionar "&^" abaixo
mul_op ::= MULT | DIV | MOD | LSHIFT | RSHIFT | AND;

//LEMBRAR: Adicionar o "<-" abaixo
unary_op ::= PLUS | MINUS | NOT | XOR | MULT | AND;

// Conversions

conversion ::= type LPAREN expression comma_2 RPAREN;

// Statements

statement ::= declaration | labeled_stmt | simple_stmt | go_stmt | return_stmt | break_stmt | continue_stmt | goto_stmt | fallthrough_stmt | block | if_stmt | switch_stmt | select_stmt | for_stmt | defer_stmt;

simple_stmt ::= empty_stmt | expression_stmt | send_stmt | inc_dec_stmt | assignment | short_var_decl;

// Empty statements

empty_stmt ::= ;

// Labeled statements

labeled_stmt ::= label COLON statement;
label ::= ID;

// Expression statements

expression_stmt ::= expression;

// Send statements
// Lembrar: Adicionar "<-" abaixo.
send_stmt ::= channel expression;
channel ::= expression;

// IncDec statements

inc_dec_stmt ::= expression ( PLUSPLUS | MINUSMINUS );

// Assignments

assignment ::= expression_list assign_op expression_list;

assign_op ::= add_op_2 EQUAL;
mul_op_2 ::= mul_op | ;
add_op_2 ::= add_op | mul_op_2;

// If statements

if_stmt ::= IF simple_stmt_2 expression block else_2;
simple_stmt_2 ::= simple_stmt | SEMICOLON;
else_2 ::= ELSE | ( if_stmt | block );

// Switch statements

switch_stmt ::= expr_switch_stmt | type_switch_stmt;

// Expression switches 

expr_switch_stmt ::= SWITCH simple_stmt_2 expression_2 LBRACE { expr_case_clause } RBRACE;
expression_2 ::= expression | ;
expr_case_clause ::= expr_switch_case COLON statement_list;
expr_switch_case ::= CASE expression_list | DEFAULT;

// Type switches

type_switch_stmt ::= SWITCH simple_stmt_2 type_switch_guard LBRACE { type_case_clause } RBRACE;
// Lembrar: Adicionar ":=" na regra abaixo
type_switch_guard ::= id_2 primary_expr DOT LPAREN TYPE RPAREN;
id_2 ::= ID | ;
type_case_clause ::= type_switch_case COLON statement_list;
type_switch_case ::= CASE type_list | DEFAULT;
type_list ::= type { COMMA type };

// For statements

for_stmt ::= FOR condition_3  block;
condition_3 ::= condition | for_clause | range_clause | ; 
condition ::= expression;

// For statements with for clause

for_clause ::= init_stmt_2 SEMICOLON condition_2 SEMICOLON post_stmt_2;
init_stmt_2 ::= init_stmt | ;
condition_2 ::= condition | ;
post_stmt_2 ::= post_stmt | ;
init_stmt ::= simple_stmt;
post_stmt ::= simple_stmt;

// For statements with range clause
//Lembrar: Adicionar ":=" na regra abaixo;
range_clause ::= expression_list_2  RANGE expression;
expression_list_2 ::= expression_list EQUAL | identifier_list_2 | ;

// Go statements

go_stmt ::= GO expression;

// Select statements

select_stmt ::= SELECT LBRACE { comm_clause } RBRACE;
comm_clause ::= comm_case COLON statement_list;
comm_case ::= CASE ( send_stmt | recv_stmt ) | DEFAULT;
//Lembrar: Adicionar ":=" na regra abaixo
recv_stmt ::= expression_list_2 recv_expr;
recv_expr ::= expression;

// Return statements

return_stmt ::= RETURN expression_list_3;
expression_list_3 ::= expression_list | ;

// Break statements

break_stmt ::= BREAK label_2;
label_2 ::= label | ;

// Continue statements

continue_stmt ::= CONTINUE label_2;

// Goto statements

goto_stmt ::= GOTO label;

// Fallthrough statements

fallthrough_stmt ::= FALLTHROUGH;

// Defer statements

defer_stmt ::= DEFER expression;

// Source file organization

source_file ::= package_clause SEMICOLON { import_decl SEMICOLON } { top_level_decl SEMICOLON };

// Package clause

package_clause_aux ::= | package_clause:p {:RESULT = p;:};
package_clause ::= PACKAGE:p package_name:e
                                     {: System.out.println("PACKAGE RECONIZED: "+ p );:};
//package_clause ::= PACKAGE package_name;
package_name ::= identifier:id {:RESULT = id;:}
		| package_name:pk DOT identifier:id {:RESULT = pk + "." + id;:};

// Import declarations

import_decl_aux ::= | import_decl_e; 
import_decl_e ::= import_decl | import_decl_e import_decl;
import_decl ::= IMPORT ( import_spec:i | LPAREN { import_spec:i SEMICOLON } RPAREN )
				{:System.out.println("IMPORT RECONIZED: "+ i) ;:};
import_spec ::= dot_2 import_path;
dot_2 ::= DOT | package_name | ;
import_path ::= string_lit;

