/* The following code was generated by JFlex 1.6.1 */

/* Analisador lexico para a disciplina de Compiladores 
*/
                 
package lexicalanalyzer.go;

import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/rafaelf/eclipse-workspace/CompiladorGo-2018.1/src/lexicalanalyzer/go/go2.lex</tt>
 */
class GoLexicalAnalyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\4\1\3\1\21\1\22\1\2\16\6\4\0\1\4\1\75"+
    "\1\20\1\0\1\5\1\102\1\76\1\104\1\61\1\62\1\10\1\100"+
    "\1\70\1\25\1\26\1\7\1\12\1\17\1\16\1\56\1\57\1\13"+
    "\1\55\1\13\1\54\1\13\1\71\1\67\1\74\1\72\1\73\2\0"+
    "\6\15\5\5\1\5\13\5\1\14\2\5\1\65\1\1\1\66\1\101"+
    "\1\103\1\24\1\32\1\27\1\34\1\43\1\31\1\44\1\46\1\36"+
    "\1\11\1\5\1\33\1\45\1\47\1\37\1\40\1\50\1\5\1\30"+
    "\1\35\1\41\1\42\1\53\1\51\1\60\1\52\1\5\1\63\1\77"+
    "\1\64\1\0\6\6\1\23\32\6\2\0\4\5\4\0\1\5\2\0"+
    "\1\6\7\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5\1\0"+
    "\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5\21\0"+
    "\160\6\5\5\1\0\2\5\2\0\4\5\10\0\1\5\1\0\3\5"+
    "\1\0\1\5\1\0\24\5\1\0\123\5\1\0\213\5\1\0\5\6"+
    "\2\0\236\5\11\0\46\5\2\0\1\5\7\0\47\5\7\0\1\5"+
    "\1\0\55\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6"+
    "\10\0\33\5\5\0\3\5\15\0\5\6\6\0\1\5\4\0\13\6"+
    "\5\0\53\5\37\6\4\0\2\5\1\6\143\5\1\0\1\5\10\6"+
    "\1\0\6\6\2\5\2\6\1\0\4\6\2\5\12\6\3\5\2\0"+
    "\1\5\17\0\1\6\1\5\1\6\36\5\33\6\2\0\131\5\13\6"+
    "\1\5\16\0\12\6\41\5\11\6\2\5\4\0\1\5\5\0\26\5"+
    "\4\6\1\5\11\6\1\5\3\6\1\5\5\6\22\0\31\5\3\6"+
    "\104\0\1\5\1\0\13\5\67\0\33\6\1\0\4\6\66\5\3\6"+
    "\1\5\22\6\1\5\7\6\12\5\2\6\2\0\12\6\1\0\7\5"+
    "\1\0\7\5\1\0\3\6\1\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5\7\6"+
    "\2\0\2\6\2\0\3\6\1\5\10\0\1\6\4\0\2\5\1\0"+
    "\3\5\2\6\2\0\12\6\4\5\7\0\1\5\5\0\3\6\1\0"+
    "\6\5\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\2\5\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0"+
    "\3\6\3\0\1\6\7\0\4\5\1\0\1\5\7\0\14\6\3\5"+
    "\1\6\13\0\3\6\1\0\11\5\1\0\3\5\1\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\10\6\1\0"+
    "\3\6\1\0\3\6\2\0\1\5\17\0\2\5\2\6\2\0\12\6"+
    "\1\0\1\5\17\0\3\6\1\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\7\6"+
    "\2\0\2\6\2\0\3\6\10\0\2\6\4\0\2\5\1\0\3\5"+
    "\2\6\2\0\12\6\1\0\1\5\20\0\1\6\1\5\1\0\6\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5"+
    "\3\0\2\5\3\0\3\5\3\0\14\5\4\0\5\6\3\0\3\6"+
    "\1\0\4\6\2\0\1\5\6\0\1\6\16\0\12\6\11\0\1\5"+
    "\7\0\3\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\3\0\1\5\7\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\1\0\2\5\6\0\2\5\2\6\2\0\12\6\22\0\2\6"+
    "\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5"+
    "\2\0\1\6\1\5\7\6\1\0\3\6\1\0\4\6\7\0\2\6"+
    "\7\0\1\5\1\0\2\5\2\6\2\0\12\6\1\0\2\5\17\0"+
    "\2\6\1\0\10\5\1\0\3\5\1\0\51\5\2\0\1\5\7\6"+
    "\1\0\3\6\1\0\4\6\1\5\10\0\1\6\10\0\2\5\2\6"+
    "\2\0\12\6\12\0\6\5\2\0\2\6\1\0\22\5\3\0\30\5"+
    "\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\6\4\0\6\6"+
    "\1\0\1\6\1\0\10\6\22\0\2\6\15\0\60\5\1\6\2\5"+
    "\7\6\4\0\10\5\10\6\1\0\12\6\47\0\2\5\1\0\1\5"+
    "\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5"+
    "\1\6\2\5\6\6\1\0\2\6\1\5\2\0\5\5\1\0\1\5"+
    "\1\0\6\6\2\0\12\6\2\0\4\5\40\0\1\5\27\0\2\6"+
    "\6\0\12\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\10\5\1\0\44\5\4\0\24\6\1\0\2\6\5\5\13\6\1\0"+
    "\44\6\11\0\1\6\71\0\53\5\24\6\1\5\12\6\6\0\6\5"+
    "\4\6\4\5\3\6\1\5\3\6\2\5\7\6\3\5\4\6\15\5"+
    "\14\6\1\5\17\6\2\0\46\5\1\0\1\5\5\0\1\5\2\0"+
    "\53\5\1\0\u014d\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0"+
    "\4\5\2\0\51\5\1\0\4\5\2\0\41\5\1\0\4\5\2\0"+
    "\7\5\1\0\1\5\1\0\4\5\2\0\17\5\1\0\71\5\1\0"+
    "\4\5\2\0\103\5\2\0\3\6\40\0\20\5\20\0\125\5\14\0"+
    "\u026c\5\2\0\21\5\1\0\32\5\5\0\113\5\3\0\3\5\17\0"+
    "\15\5\1\0\4\5\3\6\13\0\22\5\3\6\13\0\22\5\2\6"+
    "\14\0\15\5\1\0\3\5\1\0\2\6\14\0\64\5\40\6\3\0"+
    "\1\5\3\0\2\5\1\6\2\0\12\6\41\0\3\6\2\0\12\6"+
    "\6\0\130\5\10\0\51\5\1\6\1\5\5\0\106\5\12\0\35\5"+
    "\3\0\14\6\4\0\14\6\12\0\12\6\36\5\2\0\5\5\13\0"+
    "\54\5\4\0\21\6\7\5\2\6\6\0\12\6\46\0\27\5\5\6"+
    "\4\0\65\5\12\6\1\0\35\6\2\0\13\6\6\0\12\6\15\0"+
    "\1\5\130\0\5\6\57\5\21\6\7\5\4\0\12\6\21\0\11\6"+
    "\14\0\3\6\36\5\15\6\2\5\12\6\54\5\16\6\14\0\44\5"+
    "\24\6\10\0\12\6\3\0\3\5\12\6\44\5\122\0\3\6\1\0"+
    "\25\6\4\5\1\6\4\5\3\6\2\5\11\0\300\5\47\6\25\0"+
    "\4\6\u0116\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5"+
    "\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5"+
    "\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5\16\0\5\6"+
    "\30\0\1\21\1\21\5\6\20\0\2\5\23\0\1\5\13\0\5\6"+
    "\5\0\6\6\1\0\1\5\15\0\1\5\20\0\15\5\3\0\33\5"+
    "\25\0\15\6\4\0\1\6\3\0\14\6\21\0\1\5\4\0\1\5"+
    "\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\1\0\13\5\2\0\4\5\5\0\5\5"+
    "\4\0\1\5\21\0\51\5\u0a77\0\57\5\1\0\57\5\1\0\205\5"+
    "\6\0\4\5\3\6\2\5\14\0\46\5\1\0\1\5\5\0\1\5"+
    "\2\0\70\5\7\0\1\5\17\0\1\6\27\5\11\0\7\5\1\0"+
    "\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0"+
    "\7\5\1\0\7\5\1\0\40\6\57\0\1\5\u01d5\0\3\5\31\0"+
    "\11\5\6\6\1\0\5\5\2\0\5\5\4\0\126\5\2\0\2\6"+
    "\2\0\3\5\1\0\132\5\1\0\4\5\5\0\51\5\3\0\136\5"+
    "\21\0\33\5\65\0\20\5\u0200\0\u19b6\5\112\0\u51cd\5\63\0\u048d\5"+
    "\103\0\56\5\2\0\u010d\5\3\0\20\5\12\6\2\5\24\0\57\5"+
    "\1\6\4\0\12\6\1\0\31\5\7\0\1\6\120\5\2\6\45\0"+
    "\11\5\2\0\147\5\2\0\4\5\1\0\4\5\14\0\13\5\115\0"+
    "\12\5\1\6\3\5\1\6\4\5\1\6\27\5\5\6\20\0\1\5"+
    "\7\0\64\5\14\0\2\6\62\5\21\6\13\0\12\6\6\0\22\6"+
    "\6\5\3\0\1\5\4\0\12\6\34\5\10\6\2\0\27\5\15\6"+
    "\14\0\35\5\3\0\4\6\57\5\16\6\16\0\1\5\12\6\46\0"+
    "\51\5\16\6\11\0\3\5\1\6\10\5\2\6\2\0\12\6\6\0"+
    "\27\5\3\0\1\5\1\6\4\0\60\5\1\6\1\5\3\6\2\5"+
    "\2\6\5\5\2\6\1\5\1\6\1\5\30\0\3\5\2\0\13\5"+
    "\5\6\2\0\3\5\2\6\12\0\6\5\2\0\6\5\2\0\6\5"+
    "\11\0\7\5\1\0\7\5\221\0\43\5\10\6\1\0\2\6\2\0"+
    "\12\6\6\0\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0\u016e\5\2\0"+
    "\152\5\46\0\7\5\14\0\5\5\5\0\1\5\1\6\12\5\1\0"+
    "\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0"+
    "\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\15\5\3\0"+
    "\20\6\20\0\7\6\14\0\2\5\30\0\3\5\31\0\1\5\6\0"+
    "\5\5\1\0\207\5\2\0\1\6\4\0\1\5\13\0\12\6\7\0"+
    "\32\5\4\0\1\5\1\0\32\5\13\0\131\5\3\0\6\5\2\0"+
    "\6\5\2\0\6\5\2\0\3\5\3\0\2\5\3\0\2\5\22\0"+
    "\3\6\4\0\14\5\1\0\32\5\1\0\23\5\1\0\2\5\1\0"+
    "\17\5\2\0\16\5\42\0\173\5\105\0\65\5\210\0\1\6\202\0"+
    "\35\5\3\0\61\5\57\0\37\5\21\0\33\5\65\0\36\5\2\0"+
    "\44\5\4\0\10\5\1\0\5\5\52\0\236\5\2\0\12\6\u0356\0"+
    "\6\5\2\0\1\5\1\0\54\5\1\0\2\5\3\0\1\5\2\0"+
    "\27\5\252\0\26\5\12\0\32\5\106\0\70\5\6\0\2\5\100\0"+
    "\1\5\3\6\1\0\2\6\5\0\4\6\4\5\1\0\3\5\1\0"+
    "\33\5\4\0\3\6\4\0\1\6\40\0\35\5\203\0\66\5\12\0"+
    "\26\5\12\0\23\5\215\0\111\5\u03b7\0\3\6\65\5\17\6\37\0"+
    "\12\6\20\0\3\6\55\5\13\6\2\0\1\6\22\0\31\5\7\0"+
    "\12\6\6\0\3\6\44\5\16\6\1\0\12\6\100\0\3\6\60\5"+
    "\16\6\4\5\13\0\12\6\u04a6\0\53\5\15\6\10\0\12\6\u0936\0"+
    "\u036f\5\221\0\143\5\u0b9d\0\u042f\5\u33d1\0\u0239\5\u04c7\0\105\5\13\0"+
    "\1\5\56\6\20\0\4\6\15\5\u4060\0\2\5\u2163\0\5\6\3\0"+
    "\26\6\2\0\7\6\36\0\4\6\224\0\3\6\u01bb\0\125\5\1\0"+
    "\107\5\1\0\2\5\2\0\1\5\2\0\2\5\2\0\4\5\1\0"+
    "\14\5\1\0\1\5\1\0\7\5\1\0\101\5\1\0\4\5\2\0"+
    "\10\5\1\0\7\5\1\0\34\5\1\0\4\5\1\0\5\5\1\0"+
    "\1\5\3\0\7\5\1\0\u0154\5\2\0\31\5\1\0\31\5\1\0"+
    "\37\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0\37\5\1\0"+
    "\31\5\1\0\37\5\1\0\31\5\1\0\10\5\2\0\62\6\u1600\0"+
    "\4\5\1\0\33\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0"+
    "\12\5\1\0\4\5\1\0\1\5\1\0\1\5\6\0\1\5\4\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\3\5\1\0\2\5\1\0"+
    "\1\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\0\1\5\2\0\4\5\1\0\7\5\1\0"+
    "\4\5\1\0\4\5\1\0\1\5\1\0\12\5\1\0\21\5\5\0"+
    "\3\5\1\0\5\5\1\0\21\5\u1144\0\ua6d7\5\51\0\u1035\5\13\0"+
    "\336\5\u3fe2\0\u021e\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\6\36\0\140\6\200\0\360\6\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\1\1\11\1\12\15\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\1\2\37\1\40\1\2\1\0\1\41\1\42"+
    "\1\3\1\43\1\3\3\0\1\44\1\0\1\44\1\45"+
    "\1\46\1\47\1\45\1\0\25\3\1\50\3\3\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\0\1\103\1\3\2\104\1\105\23\3\1\106"+
    "\3\3\1\107\1\3\1\110\1\111\1\112\1\113\2\3"+
    "\1\114\3\3\1\104\1\3\1\115\1\116\2\3\1\117"+
    "\1\120\1\121\1\122\7\3\1\123\1\124\1\125\4\3"+
    "\1\126\1\3\1\127\1\3\1\130\1\3\1\131\1\132"+
    "\1\3\1\104\1\133\1\3\1\134\1\135\10\3\1\136"+
    "\2\3\1\137\1\3\1\140\4\3\1\141\1\104\1\142"+
    "\2\3\1\143\1\144\1\145\1\146\1\147\1\3\1\150"+
    "\1\151\6\3\1\104\2\3\1\152\1\153\1\3\1\154"+
    "\1\155\1\156\1\3\1\104\1\157\3\3\1\160\1\104"+
    "\1\3\1\161\1\3\1\104\1\162\1\3\1\163";

  private static int [] zzUnpackAction() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\212\0\u0114\0\u0159\0\u019e"+
    "\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0678\0\u06bd\0\u0702\0\212\0\212\0\212\0\212"+
    "\0\212\0\212\0\212\0\212\0\u0747\0\u078c\0\u07d1\0\u0816"+
    "\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u0114\0\u09f9"+
    "\0\u0a3e\0\u0a83\0\212\0\212\0\u0ac8\0\u0b0d\0\212\0\212"+
    "\0\u0b52\0\u0114\0\u0b97\0\u0bdc\0\u0c21\0\u02b2\0\u02b2\0\u02f7"+
    "\0\u02f7\0\u0c66\0\212\0\212\0\u0c21\0\u0cab\0\u0cf0\0\u0d35"+
    "\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d"+
    "\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185"+
    "\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\212"+
    "\0\212\0\212\0\u13ad\0\212\0\212\0\u13f2\0\212\0\212"+
    "\0\212\0\u1437\0\212\0\212\0\212\0\212\0\212\0\212"+
    "\0\212\0\212\0\212\0\212\0\212\0\212\0\212\0\212"+
    "\0\212\0\u147c\0\u14c1\0\u1506\0\u0bdc\0\u154b\0\212\0\u1590"+
    "\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8"+
    "\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0"+
    "\0\u1a25\0\u1a6a\0\u0114\0\u1aaf\0\u1af4\0\u1b39\0\u0114\0\u1b7e"+
    "\0\u0114\0\212\0\212\0\212\0\u1bc3\0\u1c08\0\u0114\0\u1c4d"+
    "\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u0114\0\u0114\0\u1da6\0\u1deb"+
    "\0\u0114\0\u0114\0\u0114\0\u0114\0\u1e30\0\u1e75\0\u1eba\0\u1eff"+
    "\0\u1f44\0\u1f89\0\u1fce\0\u0114\0\u0114\0\u2013\0\u2058\0\u209d"+
    "\0\u20e2\0\u2127\0\u0114\0\u216c\0\u0114\0\u21b1\0\u0114\0\u21f6"+
    "\0\u0114\0\u0114\0\u223b\0\u2280\0\u0114\0\u22c5\0\u0114\0\u0114"+
    "\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed"+
    "\0\u0114\0\u2532\0\u2577\0\u0114\0\u25bc\0\u0114\0\u2601\0\u2646"+
    "\0\u268b\0\u26d0\0\u0114\0\u2715\0\u0114\0\u275a\0\u279f\0\u0114"+
    "\0\u0114\0\u0114\0\u0114\0\u0114\0\u27e4\0\u0114\0\u0114\0\u2829"+
    "\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51"+
    "\0\u0114\0\u0114\0\u2a96\0\u0114\0\u0114\0\u0114\0\u2adb\0\u2b20"+
    "\0\u0114\0\u2b65\0\u2baa\0\u2bef\0\u0114\0\u2c34\0\u2c79\0\u0114"+
    "\0\u2cbe\0\212\0\u0114\0\u2d03\0\u0114";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\1\4\2\5\1\6\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\2\6\2\13\1\14\1\3\1\5\1\3"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\2\6\1\23"+
    "\1\24\3\6\1\25\1\26\1\27\1\30\1\6\1\31"+
    "\1\32\1\33\2\6\1\34\4\13\1\6\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\3\1\60\1\61\1\62\1\63\14\60\1\64"+
    "\64\60\110\0\1\5\106\0\2\6\2\0\7\6\3\0"+
    "\1\6\3\0\32\6\22\0\1\6\10\0\1\65\1\66"+
    "\61\0\1\67\104\0\1\70\17\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\10\6\1\71\4\6\1\72\2\6"+
    "\1\73\11\6\22\0\1\6\13\0\2\13\1\74\1\0"+
    "\2\13\6\0\1\75\25\0\4\13\1\74\36\0\2\13"+
    "\2\0\2\13\6\0\1\75\25\0\4\13\25\0\2\76"+
    "\2\0\14\76\1\77\3\0\61\76\2\100\2\0\15\100"+
    "\3\0\1\101\60\100\12\0\2\102\2\0\2\102\5\0"+
    "\1\103\1\75\25\0\4\102\12\0\1\104\24\0\2\105"+
    "\2\0\2\105\6\0\1\106\25\0\4\105\32\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\1\6\1\107\7\6"+
    "\1\110\11\6\1\111\6\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\2\6\1\112\1\113"+
    "\7\6\1\114\16\6\22\0\1\6\6\0\2\6\2\0"+
    "\7\6\3\0\1\6\3\0\16\6\1\115\13\6\22\0"+
    "\1\6\6\0\2\6\2\0\7\6\3\0\1\6\3\0"+
    "\3\6\1\116\3\6\1\117\1\6\1\120\20\6\22\0"+
    "\1\6\6\0\2\6\2\0\7\6\3\0\1\6\3\0"+
    "\2\6\1\121\7\6\1\122\7\6\1\123\7\6\22\0"+
    "\1\6\6\0\2\6\2\0\7\6\3\0\1\6\3\0"+
    "\1\6\1\124\21\6\1\125\6\6\22\0\1\6\6\0"+
    "\2\6\2\0\1\126\6\6\3\0\1\6\3\0\32\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\2\6\1\127\27\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\3\6\1\130\5\6"+
    "\1\131\1\6\1\132\2\6\1\133\13\6\22\0\1\6"+
    "\6\0\2\6\2\0\7\6\3\0\1\6\3\0\11\6"+
    "\1\134\20\6\22\0\1\6\6\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\3\6\1\135\26\6\22\0\1\6"+
    "\6\0\2\6\2\0\7\6\3\0\1\6\3\0\3\6"+
    "\1\136\26\6\22\0\1\6\6\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\3\6\1\137\26\6\22\0\1\6"+
    "\73\0\1\140\104\0\1\141\104\0\1\142\1\143\36\0"+
    "\1\144\44\0\1\145\1\0\1\146\102\0\1\147\104\0"+
    "\1\150\3\0\1\151\2\0\1\152\75\0\1\153\4\0"+
    "\1\154\17\0\2\102\2\0\2\102\6\0\1\75\25\0"+
    "\4\102\12\0\1\155\5\0\1\156\76\0\1\157\104\0"+
    "\1\160\12\0\1\60\3\0\14\60\1\0\64\60\1\161"+
    "\1\162\2\0\14\161\1\163\3\0\3\161\1\164\1\165"+
    "\6\161\1\166\1\161\1\167\2\161\1\170\37\161\1\171"+
    "\3\0\1\63\101\0\2\65\1\4\1\5\101\65\10\66"+
    "\1\172\74\66\5\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\12\6\1\173\17\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\21\6\1\174\10\6"+
    "\22\0\1\6\13\0\1\175\1\176\1\0\3\176\7\0"+
    "\1\176\1\0\2\176\1\0\1\176\6\0\2\176\7\0"+
    "\4\176\37\0\2\105\2\0\2\105\34\0\4\105\37\0"+
    "\2\102\2\0\2\102\6\0\1\75\25\0\4\102\53\0"+
    "\1\177\63\0\2\6\2\0\7\6\3\0\1\6\3\0"+
    "\2\6\1\200\27\6\22\0\1\6\6\0\2\6\2\0"+
    "\7\6\3\0\1\6\3\0\11\6\1\201\20\6\22\0"+
    "\1\6\6\0\2\6\2\0\7\6\3\0\1\6\3\0"+
    "\12\6\1\202\17\6\22\0\1\6\6\0\2\6\2\0"+
    "\7\6\3\0\1\6\3\0\12\6\1\203\17\6\22\0"+
    "\1\6\6\0\2\6\2\0\7\6\3\0\1\6\3\0"+
    "\10\6\1\204\21\6\22\0\1\6\6\0\2\6\2\0"+
    "\7\6\3\0\1\6\3\0\10\6\1\205\21\6\22\0"+
    "\1\6\6\0\2\6\2\0\7\6\3\0\1\6\3\0"+
    "\6\6\1\206\23\6\22\0\1\6\6\0\2\6\2\0"+
    "\7\6\3\0\1\6\3\0\6\6\1\207\23\6\22\0"+
    "\1\6\6\0\2\6\2\0\7\6\3\0\1\6\3\0"+
    "\3\6\1\210\26\6\22\0\1\6\6\0\2\6\2\0"+
    "\7\6\3\0\1\6\3\0\10\6\1\211\7\6\1\212"+
    "\11\6\22\0\1\6\6\0\2\6\2\0\7\6\3\0"+
    "\1\6\3\0\16\6\1\213\13\6\22\0\1\6\6\0"+
    "\2\6\2\0\7\6\3\0\1\6\3\0\1\6\1\214"+
    "\30\6\22\0\1\6\6\0\2\6\2\0\1\215\6\6"+
    "\3\0\1\6\3\0\32\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\13\6\1\216\16\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\21\6\1\217\10\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\10\6\1\220\21\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\15\6\1\221\14\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\16\6\1\222\13\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\1\6\1\223\30\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\10\6\1\224\21\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\11\6\1\225\20\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\12\6\1\226\17\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\21\6\1\227\10\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\5\6\1\230\24\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\1\6\1\231\30\6\22\0\1\6\73\0\1\232"+
    "\104\0\1\233\104\0\1\234\12\0\7\66\1\5\1\172"+
    "\74\66\5\0\2\6\2\0\6\6\1\235\3\0\1\6"+
    "\3\0\2\6\1\236\22\6\1\237\1\240\1\241\2\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\11\6\1\242\20\6\22\0\1\6\13\0\2\243"+
    "\1\0\3\243\7\0\1\243\1\0\2\243\1\0\1\243"+
    "\6\0\2\243\7\0\4\243\32\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\3\6\1\244\26\6\22\0\1\6"+
    "\6\0\2\6\2\0\7\6\3\0\1\6\3\0\16\6"+
    "\1\245\13\6\22\0\1\6\6\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\2\6\1\246\27\6\22\0\1\6"+
    "\6\0\2\6\2\0\7\6\3\0\1\6\3\0\13\6"+
    "\1\247\16\6\22\0\1\6\6\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\17\6\1\250\12\6\22\0\1\6"+
    "\6\0\2\6\2\0\7\6\3\0\1\6\3\0\2\6"+
    "\1\251\27\6\22\0\1\6\6\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\2\6\1\252\27\6\22\0\1\6"+
    "\6\0\2\6\2\0\7\6\3\0\1\6\3\0\2\6"+
    "\1\253\27\6\22\0\1\6\6\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\10\6\1\254\21\6\22\0\1\6"+
    "\6\0\2\6\2\0\7\6\3\0\1\6\3\0\6\6"+
    "\1\255\3\6\1\256\17\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\21\6\1\257\10\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\2\6\1\260\27\6\22\0\1\6\6\0\2\6"+
    "\2\0\1\261\6\6\3\0\1\6\3\0\13\6\1\262"+
    "\16\6\22\0\1\6\6\0\2\6\2\0\7\6\3\0"+
    "\1\6\3\0\12\6\1\263\17\6\22\0\1\6\6\0"+
    "\2\6\2\0\7\6\3\0\1\6\3\0\2\6\1\264"+
    "\27\6\22\0\1\6\6\0\2\6\2\0\7\6\3\0"+
    "\1\6\3\0\2\6\1\265\27\6\22\0\1\6\6\0"+
    "\2\6\2\0\7\6\3\0\1\6\3\0\12\6\1\266"+
    "\17\6\22\0\1\6\6\0\2\6\2\0\7\6\3\0"+
    "\1\6\3\0\2\6\1\267\1\270\26\6\22\0\1\6"+
    "\6\0\2\6\2\0\7\6\3\0\1\6\3\0\6\6"+
    "\1\271\7\6\1\272\13\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\5\6\1\273\24\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\3\6\1\274\26\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\11\6\1\275\20\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\4\6\1\276\25\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\26\6\1\277\3\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\1\6\1\300\30\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\30\6\1\301\1\6"+
    "\22\0\1\6\6\0\2\6\2\0\5\6\1\302\1\6"+
    "\3\0\1\6\3\0\32\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\1\6\1\303\30\6"+
    "\22\0\1\6\13\0\2\304\1\0\3\304\7\0\1\304"+
    "\1\0\2\304\1\0\1\304\6\0\2\304\7\0\4\304"+
    "\32\0\2\6\2\0\7\6\3\0\1\6\3\0\4\6"+
    "\1\305\25\6\22\0\1\6\6\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\1\6\1\306\30\6\22\0\1\6"+
    "\6\0\2\6\2\0\7\6\3\0\1\6\3\0\2\6"+
    "\1\307\27\6\22\0\1\6\6\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\12\6\1\310\17\6\22\0\1\6"+
    "\6\0\2\6\2\0\1\311\6\6\3\0\1\6\3\0"+
    "\32\6\22\0\1\6\6\0\2\6\2\0\7\6\3\0"+
    "\1\6\3\0\16\6\1\312\13\6\22\0\1\6\6\0"+
    "\2\6\2\0\7\6\3\0\1\6\3\0\5\6\1\313"+
    "\24\6\22\0\1\6\6\0\2\6\2\0\7\6\3\0"+
    "\1\6\3\0\10\6\1\314\21\6\22\0\1\6\6\0"+
    "\2\6\2\0\7\6\3\0\1\6\3\0\5\6\1\315"+
    "\24\6\22\0\1\6\6\0\2\6\2\0\7\6\3\0"+
    "\1\6\3\0\5\6\1\316\24\6\22\0\1\6\6\0"+
    "\2\6\2\0\6\6\1\317\3\0\1\6\3\0\21\6"+
    "\1\320\3\6\1\321\1\322\1\323\2\6\22\0\1\6"+
    "\6\0\2\6\2\0\7\6\3\0\1\6\3\0\1\6"+
    "\1\324\30\6\22\0\1\6\6\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\13\6\1\325\16\6\22\0\1\6"+
    "\6\0\2\6\2\0\7\6\3\0\1\6\3\0\2\6"+
    "\1\326\27\6\22\0\1\6\6\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\12\6\1\327\17\6\22\0\1\6"+
    "\6\0\2\6\2\0\7\6\3\0\1\6\3\0\12\6"+
    "\1\330\17\6\22\0\1\6\6\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\3\6\1\331\26\6\22\0\1\6"+
    "\6\0\2\6\2\0\7\6\3\0\1\6\3\0\15\6"+
    "\1\332\14\6\22\0\1\6\6\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\12\6\1\333\17\6\22\0\1\6"+
    "\13\0\2\334\1\0\3\334\7\0\1\334\1\0\2\334"+
    "\1\0\1\334\6\0\2\334\7\0\4\334\32\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\10\6\1\335\21\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\10\6\1\336\21\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\2\6\1\337\27\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\12\6\1\340\17\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\17\6\1\341\12\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\12\6\1\342\17\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\7\6\1\343\22\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\26\6\1\344\3\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\12\6\1\345\17\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\30\6\1\346\1\6\22\0\1\6\6\0\2\6"+
    "\2\0\5\6\1\347\1\6\3\0\1\6\3\0\32\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\16\6\1\350\13\6\22\0\1\6\6\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\7\6\1\351\22\6"+
    "\22\0\1\6\6\0\2\6\2\0\7\6\3\0\1\6"+
    "\3\0\26\6\1\352\1\353\2\6\22\0\1\6\6\0"+
    "\2\6\2\0\7\6\3\0\1\6\3\0\17\6\1\354"+
    "\12\6\22\0\1\6\6\0\2\6\2\0\7\6\3\0"+
    "\1\6\3\0\3\6\1\355\26\6\22\0\1\6\13\0"+
    "\2\356\1\0\3\356\7\0\1\356\1\0\2\356\1\0"+
    "\1\356\6\0\2\356\7\0\4\356\32\0\2\6\2\0"+
    "\7\6\3\0\1\6\3\0\13\6\1\357\16\6\22\0"+
    "\1\6\6\0\2\6\2\0\7\6\3\0\1\6\3\0"+
    "\31\6\1\360\22\0\1\6\6\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\1\6\1\361\30\6\22\0\1\6"+
    "\6\0\2\6\2\0\7\6\3\0\1\6\3\0\12\6"+
    "\1\362\17\6\22\0\1\6\6\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\1\6\1\363\30\6\22\0\1\6"+
    "\6\0\2\6\2\0\7\6\3\0\1\6\3\0\30\6"+
    "\1\364\1\6\22\0\1\6\6\0\2\6\2\0\5\6"+
    "\1\365\1\6\3\0\1\6\3\0\32\6\22\0\1\6"+
    "\6\0\2\6\2\0\7\6\3\0\1\6\3\0\2\6"+
    "\1\366\27\6\22\0\1\6\6\0\2\6\2\0\7\6"+
    "\3\0\1\6\3\0\5\6\1\367\24\6\22\0\1\6"+
    "\13\0\2\370\1\0\3\370\7\0\1\370\1\0\2\370"+
    "\1\0\1\370\6\0\2\370\7\0\4\370\32\0\2\6"+
    "\2\0\7\6\3\0\1\6\3\0\2\6\1\371\27\6"+
    "\22\0\1\6\6\0\2\6\2\0\6\6\1\372\3\0"+
    "\1\6\3\0\26\6\1\373\3\6\22\0\1\6\6\0"+
    "\2\6\2\0\7\6\3\0\1\6\3\0\11\6\1\374"+
    "\20\6\22\0\1\6\6\0\2\6\2\0\7\6\3\0"+
    "\1\6\3\0\2\6\1\375\27\6\22\0\1\6\13\0"+
    "\2\376\1\0\3\376\7\0\1\376\1\0\2\376\1\0"+
    "\1\376\6\0\2\376\7\0\4\376\32\0\2\6\2\0"+
    "\5\6\1\377\1\6\3\0\1\6\3\0\32\6\22\0"+
    "\1\6\6\0\2\6\2\0\7\6\3\0\1\6\3\0"+
    "\30\6\1\u0100\1\6\22\0\1\6\6\0\2\6\2\0"+
    "\7\6\3\0\1\6\3\0\13\6\1\u0101\16\6\22\0"+
    "\1\6\13\0\2\u0102\1\0\3\u0102\7\0\1\u0102\1\0"+
    "\2\u0102\1\0\1\u0102\6\0\2\u0102\7\0\4\u0102\32\0"+
    "\2\6\2\0\7\6\3\0\1\6\3\0\25\6\1\u0103"+
    "\4\6\22\0\1\6\6\0\2\6\2\0\7\6\3\0"+
    "\1\6\3\0\17\6\1\u0104\12\6\22\0\1\6\6\0"+
    "\2\6\2\0\7\6\3\0\1\6\3\0\7\6\1\u0105"+
    "\22\6\22\0\1\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11592];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\27\1\10\11\16\1\2\11"+
    "\1\1\1\0\2\11\3\1\3\0\1\1\1\0\2\1"+
    "\2\11\1\1\1\0\31\1\3\11\1\1\2\11\1\1"+
    "\3\11\1\1\17\11\1\0\4\1\1\11\32\1\3\11"+
    "\145\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuilder string = new StringBuilder();  

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GoLexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2886) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Illegal character \""+yytext()+
                             "\" at line "+yyline+", column "+yycolumn);
            }
          case 116: break;
          case 2: 
            { /*Ignore*/
            }
          case 117: break;
          case 3: 
            { return symbol(sym.ID, new String(yytext()));
            }
          case 118: break;
          case 4: 
            { return symbol(sym.DIV, new String(yytext()));
            }
          case 119: break;
          case 5: 
            { return symbol(sym.MULT, new String(yytext()));
            }
          case 120: break;
          case 6: 
            { return symbol(sym.IMAGINARY_LITERAL, new String(yytext()));
            }
          case 121: break;
          case 7: 
            { return symbol(sym.INTEGER_LITERAL, new String(yytext()));
            }
          case 122: break;
          case 8: 
            { return symbol(sym.QUOTE, new String(yytext()));
            }
          case 123: break;
          case 9: 
            { return symbol(sym.MINUS, new String(yytext()));
            }
          case 124: break;
          case 10: 
            { return symbol(sym.DOT, new String(yytext()));
            }
          case 125: break;
          case 11: 
            { return symbol(sym.LPAREN, new String(yytext()));
            }
          case 126: break;
          case 12: 
            { return symbol(sym.RPAREN, new String(yytext()));
            }
          case 127: break;
          case 13: 
            { return symbol(sym.LBRACE, new String(yytext()));
            }
          case 128: break;
          case 14: 
            { return symbol(sym.RBRACE, new String(yytext()));
            }
          case 129: break;
          case 15: 
            { return symbol(sym.LBRACK, new String(yytext()));
            }
          case 130: break;
          case 16: 
            { return symbol(sym.RBRACK, new String(yytext()));
            }
          case 131: break;
          case 17: 
            { return symbol(sym.SEMICOLON, new String(yytext()));
            }
          case 132: break;
          case 18: 
            { return symbol(sym.COMMA, new String(yytext()));
            }
          case 133: break;
          case 19: 
            { return symbol(sym.COLON, new String(yytext()));
            }
          case 134: break;
          case 20: 
            { return symbol(sym.EQUAL, new String(yytext()));
            }
          case 135: break;
          case 21: 
            { return symbol(sym.GREATER, new String(yytext()));
            }
          case 136: break;
          case 22: 
            { return symbol(sym.LESS, new String(yytext()));
            }
          case 137: break;
          case 23: 
            { return symbol(sym.NOT, new String(yytext()));
            }
          case 138: break;
          case 24: 
            { return symbol(sym.AND, new String(yytext()));
            }
          case 139: break;
          case 25: 
            { return symbol(sym.OR, new String(yytext()));
            }
          case 140: break;
          case 26: 
            { return symbol(sym.PLUS, new String(yytext()));
            }
          case 141: break;
          case 27: 
            { return symbol(sym.XOR, new String(yytext()));
            }
          case 142: break;
          case 28: 
            { return symbol(sym.MOD, new String(yytext()));
            }
          case 143: break;
          case 29: 
            { return symbol(sym.UNDERSCORE, new String(yytext()));
            }
          case 144: break;
          case 30: 
            { string.append( yytext() );
            }
          case 145: break;
          case 31: 
            { throw new RuntimeException(
                                       "Unterminated string at end of line");
            }
          case 146: break;
          case 32: 
            { yybegin(YYINITIAL);
                                   return symbol(sym.STRING_LITERAL, new String(yytext()));
            }
          case 147: break;
          case 33: 
            { return symbol(sym.DIVEQ, new String(yytext()));
            }
          case 148: break;
          case 34: 
            { return symbol(sym.MULTEQ, new String(yytext()));
            }
          case 149: break;
          case 35: 
            { return symbol(sym.IF, new String(yytext()));
            }
          case 150: break;
          case 36: 
            { return symbol(sym.ALL_STRINGS_LITERAL, new String(yytext()));
            }
          case 151: break;
          case 37: 
            { return symbol(sym.FLOAT_LITERAL, new String(yytext()));
            }
          case 152: break;
          case 38: 
            { return symbol(sym.MINUSMINUS, new String(yytext()));
            }
          case 153: break;
          case 39: 
            { return symbol(sym.MINUSEQ, new String(yytext()));
            }
          case 154: break;
          case 40: 
            { return symbol(sym.GO, new String(yytext()));
            }
          case 155: break;
          case 41: 
            { return symbol(sym.DECEQ, new String(yytext()));
            }
          case 156: break;
          case 42: 
            { return symbol(sym.EQEQ, new String(yytext()));
            }
          case 157: break;
          case 43: 
            { return symbol(sym.GTEQ, new String(yytext()));
            }
          case 158: break;
          case 44: 
            { return symbol(sym.RSHIFT, new String(yytext()));
            }
          case 159: break;
          case 45: 
            { return symbol(sym.CHANNEL, new String(yytext()));
            }
          case 160: break;
          case 46: 
            { return symbol(sym.LTEQ, new String(yytext()));
            }
          case 161: break;
          case 47: 
            { return symbol(sym.LSHIFT, new String(yytext()));
            }
          case 162: break;
          case 48: 
            { return symbol(sym.NOTEQ, new String(yytext()));
            }
          case 163: break;
          case 49: 
            { return symbol(sym.ANDEQ, new String(yytext()));
            }
          case 164: break;
          case 50: 
            { return symbol(sym.ANDAND, new String(yytext()));
            }
          case 165: break;
          case 51: 
            { return symbol(sym.ANDNOT, new String(yytext()));
            }
          case 166: break;
          case 52: 
            { return symbol(sym.OREQ, new String(yytext()));
            }
          case 167: break;
          case 53: 
            { return symbol(sym.OROR, new String(yytext()));
            }
          case 168: break;
          case 54: 
            { return symbol(sym.PLUSEQ, new String(yytext()));
            }
          case 169: break;
          case 55: 
            { return symbol(sym.PLUSPLUS, new String(yytext()));
            }
          case 170: break;
          case 56: 
            { return symbol(sym.XOREQ, new String(yytext()));
            }
          case 171: break;
          case 57: 
            { return symbol(sym.MODEQ, new String(yytext()));
            }
          case 172: break;
          case 58: 
            { throw new RuntimeException(
                                  "Illegal escape sequence \""+yytext()+"\"");
            }
          case 173: break;
          case 59: 
            { string.append( '\\' );
            }
          case 174: break;
          case 60: 
            { string.append( '\"' );
            }
          case 175: break;
          case 61: 
            { string.append( '\b' );
            }
          case 176: break;
          case 62: 
            { string.append( '\r' );
            }
          case 177: break;
          case 63: 
            { string.append( '\n' );
            }
          case 178: break;
          case 64: 
            { string.append( '\t' );
            }
          case 179: break;
          case 65: 
            { string.append( '\f' );
            }
          case 180: break;
          case 66: 
            { string.append( '\'' );
            }
          case 181: break;
          case 67: 
            { return symbol(sym.INT, new String(yytext()));
            }
          case 182: break;
          case 68: 
            { return symbol(sym.HEXAL_LITERAL, new String(yytext()));
            }
          case 183: break;
          case 69: 
            { return symbol(sym.SUSPOINTS, new String(yytext()));
            }
          case 184: break;
          case 70: 
            { return symbol(sym.FOR, new String(yytext()));
            }
          case 185: break;
          case 71: 
            { return symbol(sym.MAP, new String(yytext()));
            }
          case 186: break;
          case 72: 
            { return symbol(sym.VAR, new String(yytext()));
            }
          case 187: break;
          case 73: 
            { return symbol(sym.RSHIFTEQ, new String(yytext()));
            }
          case 188: break;
          case 74: 
            { return symbol(sym.LSHIFTEQ, new String(yytext()));
            }
          case 189: break;
          case 75: 
            { return symbol(sym.ANDNOTEQ, new String(yytext()));
            }
          case 190: break;
          case 76: 
            { return symbol(sym.INT8, new String(yytext()));
            }
          case 191: break;
          case 77: 
            { return symbol(sym.BOOL, new String(yytext()));
            }
          case 192: break;
          case 78: 
            { return symbol(sym.BYTE, new String(yytext()));
            }
          case 193: break;
          case 79: 
            { return symbol(sym.RUNE, new String(yytext()));
            }
          case 194: break;
          case 80: 
            { return symbol(sym.ELSE, new String(yytext()));
            }
          case 195: break;
          case 81: 
            { return symbol(sym.CASE, new String(yytext()));
            }
          case 196: break;
          case 82: 
            { return symbol(sym.CHAN, new String(yytext()));
            }
          case 197: break;
          case 83: 
            { return symbol(sym.TRUE, new String(yytext()));
            }
          case 198: break;
          case 84: 
            { return symbol(sym.TYPE, new String(yytext()));
            }
          case 199: break;
          case 85: 
            { return symbol(sym.UINT, new String(yytext()));
            }
          case 200: break;
          case 86: 
            { return symbol(sym.FUNC, new String(yytext()));
            }
          case 201: break;
          case 87: 
            { return symbol(sym.GOTO, new String(yytext()));
            }
          case 202: break;
          case 88: 
            { return symbol(sym.INT16, new String(yytext()));
            }
          case 203: break;
          case 89: 
            { return symbol(sym.INT64, new String(yytext()));
            }
          case 204: break;
          case 90: 
            { return symbol(sym.INT32, new String(yytext()));
            }
          case 205: break;
          case 91: 
            { return symbol(sym.BREAK, new String(yytext()));
            }
          case 206: break;
          case 92: 
            { return symbol(sym.RANGE, new String(yytext()));
            }
          case 207: break;
          case 93: 
            { return symbol(sym.CONST, new String(yytext()));
            }
          case 208: break;
          case 94: 
            { return symbol(sym.UINT8, new String(yytext()));
            }
          case 209: break;
          case 95: 
            { return symbol(sym.DEFER, new String(yytext()));
            }
          case 210: break;
          case 96: 
            { return symbol(sym.FALSE, new String(yytext()));
            }
          case 211: break;
          case 97: 
            { return symbol(sym.IMPORT, new String(yytext()));
            }
          case 212: break;
          case 98: 
            { return symbol(sym.RETURN, new String(yytext()));
            }
          case 213: break;
          case 99: 
            { return symbol(sym.SELECT, new String(yytext()));
            }
          case 214: break;
          case 100: 
            { return symbol(sym.STRING, new String(yytext()));
            }
          case 215: break;
          case 101: 
            { return symbol(sym.STRUCT, new String(yytext()));
            }
          case 216: break;
          case 102: 
            { return symbol(sym.SWITCH, new String(yytext()));
            }
          case 217: break;
          case 103: 
            { return symbol(sym.UINT16, new String(yytext()));
            }
          case 218: break;
          case 104: 
            { return symbol(sym.UINT64, new String(yytext()));
            }
          case 219: break;
          case 105: 
            { return symbol(sym.UINT32, new String(yytext()));
            }
          case 220: break;
          case 106: 
            { return symbol(sym.UINTPTR, new String(yytext()));
            }
          case 221: break;
          case 107: 
            { return symbol(sym.DEFAULT, new String(yytext()));
            }
          case 222: break;
          case 108: 
            { return symbol(sym.FLOAT64, new String(yytext()));
            }
          case 223: break;
          case 109: 
            { return symbol(sym.FLOAT32, new String(yytext()));
            }
          case 224: break;
          case 110: 
            { return symbol(sym.PACKAGE, new String(yytext()));
            }
          case 225: break;
          case 111: 
            { return symbol(sym.CONTINUE, new String(yytext()));
            }
          case 226: break;
          case 112: 
            { return symbol(sym.INTERFACE, new String(yytext()));
            }
          case 227: break;
          case 113: 
            { return symbol(sym.COMPLEX64, new String(yytext()));
            }
          case 228: break;
          case 114: 
            { return symbol(sym.COMPLEX128, new String(yytext()));
            }
          case 229: break;
          case 115: 
            { return symbol(sym.FALLTHROUGH, new String(yytext()));
            }
          case 230: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
