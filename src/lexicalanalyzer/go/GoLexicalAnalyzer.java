/* The following code was generated by JFlex 1.3.5 on 26/07/18 21:52 */

package lexicalanalyzer.go;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import lexicalanalyzer.go.Sym;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 26/07/18 21:52 from the specification file
 * <tt>file:/home/rafaelf/eclipse-workspace/CompiladorGo-2018.1/src/lexicalanalyzer/go/go.lex</tt>
 */
public class GoLexicalAnalyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\41\1\2\1\0\1\41\1\1\22\0\1\41\1\61\1\4"+
    "\1\100\1\0\1\60\1\66\1\40\1\71\1\72\1\44\1\22\1\67"+
    "\1\23\1\24\1\42\1\12\7\15\2\11\1\64\1\70\1\63\1\62"+
    "\1\65\1\77\1\0\4\13\1\21\1\13\16\6\1\30\2\6\1\17"+
    "\2\6\1\73\1\26\1\74\1\43\1\10\1\5\1\31\1\32\1\52"+
    "\1\14\1\20\1\33\1\45\1\55\1\25\1\6\1\54\1\53\1\47"+
    "\1\34\1\46\1\50\1\6\1\35\1\51\1\36\1\27\1\37\1\57"+
    "\1\16\1\56\1\6\1\75\1\3\1\76\54\0\1\6\12\0\1\6"+
    "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6"+
    "\16\0\5\6\7\0\1\6\1\0\1\6\201\0\5\6\1\0\2\6"+
    "\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\123\6\1\0\213\6\10\0\236\6\11\0\46\6\2\0\1\6"+
    "\7\0\47\6\110\0\33\6\5\0\3\6\55\0\53\6\25\0\12\7"+
    "\4\0\2\6\1\0\143\6\1\0\1\6\17\0\2\6\7\0\2\6"+
    "\12\7\3\6\2\0\1\6\20\0\1\6\1\0\36\6\35\0\131\6"+
    "\13\0\1\6\16\0\12\7\41\6\11\0\2\6\4\0\1\6\5\0"+
    "\26\6\4\0\1\6\11\0\1\6\3\0\1\6\27\0\31\6\107\0"+
    "\1\6\1\0\13\6\127\0\66\6\3\0\1\6\22\0\1\6\7\0"+
    "\12\6\4\0\12\7\1\0\7\6\1\0\7\6\5\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\3\0"+
    "\1\6\20\0\1\6\15\0\2\6\1\0\3\6\4\0\12\7\2\6"+
    "\23\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\37\0\4\6\1\0\1\6\7\0\12\7"+
    "\2\0\3\6\20\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\3\0\1\6\22\0\1\6\17\0\2\6"+
    "\4\0\12\7\25\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\3\0\1\6\36\0\2\6\1\0\3\6"+
    "\4\0\12\7\1\0\1\6\21\0\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6"+
    "\3\0\3\6\3\0\14\6\26\0\1\6\25\0\12\7\25\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6"+
    "\32\0\2\6\6\0\2\6\4\0\12\7\25\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6\40\0\1\6"+
    "\1\0\2\6\4\0\12\7\1\0\2\6\22\0\10\6\1\0\3\6"+
    "\1\0\51\6\2\0\1\6\20\0\1\6\21\0\2\6\4\0\12\7"+
    "\12\0\6\6\5\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6"+
    "\2\0\7\6\72\0\60\6\1\0\2\6\14\0\7\6\11\0\12\7"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\0\2\6\11\0\1\6\2\0\5\6"+
    "\1\0\1\6\11\0\12\7\2\0\4\6\40\0\1\6\37\0\12\7"+
    "\26\0\10\6\1\0\44\6\33\0\5\6\163\0\53\6\24\0\1\6"+
    "\12\7\6\0\6\6\4\0\4\6\3\0\1\6\3\0\2\6\7\0"+
    "\3\6\4\0\15\6\14\0\1\6\1\0\12\7\6\0\46\6\1\0"+
    "\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0"+
    "\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\17\6\1\0\71\6\1\0\4\6\2\0\103\6\45\0\20\6\20\0"+
    "\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\25\0"+
    "\15\6\1\0\4\6\16\0\22\6\16\0\22\6\16\0\15\6\1\0"+
    "\3\6\17\0\64\6\43\0\1\6\4\0\1\6\3\0\12\7\46\0"+
    "\12\7\6\0\130\6\10\0\51\6\1\0\1\6\5\0\106\6\12\0"+
    "\35\6\51\0\12\7\36\6\2\0\5\6\13\0\54\6\25\0\7\6"+
    "\10\0\12\7\46\0\27\6\11\0\65\6\53\0\12\7\6\0\12\7"+
    "\15\0\1\6\135\0\57\6\21\0\7\6\4\0\12\7\51\0\36\6"+
    "\15\0\2\6\12\7\54\6\32\0\44\6\34\0\12\7\3\0\3\6"+
    "\12\7\44\6\153\0\4\6\1\0\4\6\3\0\2\6\11\0\300\6"+
    "\100\0\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6"+
    "\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6"+
    "\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\164\0\1\6"+
    "\15\0\1\6\20\0\15\6\145\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6"+
    "\64\0\2\6\u0a7b\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6"+
    "\3\0\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6"+
    "\7\0\1\6\20\0\27\6\11\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\120\0\1\6\u01d5\0\2\6\52\0\5\6\5\0\2\6\4\0\126\6"+
    "\6\0\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6"+
    "\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6"+
    "\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6"+
    "\20\0\31\6\10\0\106\6\61\0\11\6\2\0\147\6\2\0\4\6"+
    "\1\0\4\6\14\0\13\6\115\0\12\6\1\0\3\6\1\0\4\6"+
    "\1\0\27\6\35\0\64\6\16\0\62\6\34\0\12\7\30\0\6\6"+
    "\3\0\1\6\4\0\12\7\34\6\12\0\27\6\31\0\35\6\7\0"+
    "\57\6\34\0\1\6\12\7\46\0\51\6\27\0\3\6\1\0\10\6"+
    "\4\0\12\7\6\0\27\6\3\0\1\6\5\0\60\6\1\0\1\6"+
    "\3\0\2\6\2\0\5\6\2\0\1\6\1\0\1\6\30\0\3\6"+
    "\2\0\13\6\7\0\3\6\14\0\6\6\2\0\6\6\2\0\6\6"+
    "\11\0\7\6\1\0\7\6\221\0\43\6\15\0\12\7\6\0\u2ba4\6"+
    "\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6"+
    "\14\0\5\6\5\0\1\6\1\0\12\6\1\0\15\6\1\0\5\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6"+
    "\22\0\100\6\2\0\66\6\50\0\14\6\164\0\5\6\1\0\207\6"+
    "\23\0\12\7\7\0\32\6\6\0\32\6\13\0\131\6\3\0\6\6"+
    "\2\0\6\6\2\0\6\6\2\0\3\6\43\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    65,   130,    65,   195,   260,   325,   390,   390,   455, 
      520,   585,   650,   715,   780,   845,   910,   975,  1040,  1105, 
     1170,  1235,  1300,  1365,  1430,  1495,  1560,  1625,  1690,  1755, 
     1820,    65,  1885,  1950,  2015,  2080,  2145,  2210,    65,    65, 
       65,    65,    65,    65,    65,    65,  2275,    65,    65,    65, 
      260,    65,  2340,   325,  2405,  2470,  2535,  2405,  2600,  2665, 
     2730,  2795,  2860,    65,    65,    65,    65,  2925,   390,  2990, 
     3055,  3120,  3185,  3250,  3315,  3380,  3445,  3510,  3575,  3640, 
     3705,  3770,  3835,  3900,    65,    65,    65,  3965,  4030,  4095, 
     4160,  4225,  4290,  4355,  4420,  4485,    65,    65,    65,    65, 
     4550,    65,    65,  4615,  4680,    65,    65,    65,   260,  4745, 
     4810,  4875,    65,  2730,  4940,  5005,    65,  5070,  5135,  5200, 
     5265,  5330,   390,  5395,  5460,  5525,  5590,   390,    65,  5655, 
     5720,  5785,  5850,  3705,  5915,    65,  5980,  6045,   390,  6110, 
     6175,  6240,  6305,  6370,  6435,  6500,    65,    65,    65,  6565, 
     6630,  6695,   390,  6760,  6825,  6890,   390,  6955,  7020,  7085, 
     7150,   390,   390,  7215,  7280,  7345,  7410,    65,   390,  7475, 
     7540,  7605,  7670,   390,  7735,  7800,   390,   390,  7865,  7930, 
     7995,   390,   390,  8060,  8125,   390,  8190,  8255,  8320,  8385, 
     8450,  8515,   390,  8580,  8645,   390,  8710,   390,  8775,  8840, 
      390,   390,   390,  8905,   390,  8970,  9035,   390,  9100,  9165, 
     9230,   390,   390,  9295,  9360,   390
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\10\1\14\1\12\2\10\1\15"+
    "\1\10\1\16\1\17\1\20\1\21\1\2\3\10\1\22"+
    "\1\23\1\10\1\24\1\25\1\26\1\27\1\4\1\30"+
    "\1\31\1\32\1\33\1\10\1\34\1\35\1\36\1\37"+
    "\5\10\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\103\0\1\4\101\0\1\61\56\0\1\62"+
    "\16\0\1\63\3\0\1\64\21\63\1\65\52\63\3\66"+
    "\1\0\1\66\1\64\73\66\6\0\14\10\3\0\1\10"+
    "\1\0\11\10\5\0\13\10\27\0\1\67\1\0\1\67"+
    "\2\12\2\67\1\12\2\67\2\70\2\0\1\71\1\72"+
    "\1\0\11\67\5\0\13\67\27\0\1\67\1\0\1\67"+
    "\1\73\1\74\2\67\1\74\2\75\2\70\2\0\1\71"+
    "\1\72\1\0\11\67\5\0\13\67\27\0\12\10\1\76"+
    "\1\10\3\0\1\10\1\0\11\10\5\0\13\10\27\0"+
    "\14\10\3\0\1\10\1\0\11\10\5\0\6\10\1\77"+
    "\4\10\43\0\1\100\37\0\1\101\41\0\1\102\36\0"+
    "\1\103\27\0\2\71\2\0\1\71\6\0\1\104\62\0"+
    "\14\10\3\0\1\10\1\0\4\10\1\105\1\106\3\10"+
    "\5\0\2\10\1\107\10\10\27\0\14\10\3\0\1\10"+
    "\1\0\6\10\1\110\2\10\5\0\13\10\27\0\14\10"+
    "\3\0\1\10\1\0\1\111\1\10\1\112\6\10\5\0"+
    "\1\10\1\113\11\10\27\0\12\10\1\114\1\10\3\0"+
    "\1\10\1\0\2\10\1\115\6\10\5\0\13\10\27\0"+
    "\14\10\3\0\1\10\1\0\6\10\1\116\2\10\5\0"+
    "\11\10\1\117\1\10\27\0\14\10\3\0\1\10\1\0"+
    "\2\10\1\120\6\10\5\0\13\10\21\0\1\121\3\0"+
    "\22\121\1\122\52\121\42\0\1\123\1\0\1\124\15\0"+
    "\1\125\100\0\1\126\100\0\1\127\24\0\14\10\3\0"+
    "\1\10\1\0\11\10\5\0\1\10\1\130\11\10\27\0"+
    "\14\10\3\0\1\10\1\0\2\10\1\131\6\10\5\0"+
    "\13\10\27\0\14\10\3\0\1\10\1\0\2\10\1\132"+
    "\6\10\5\0\13\10\27\0\12\10\1\133\1\10\3\0"+
    "\1\10\1\0\7\10\1\134\1\10\5\0\12\10\1\135"+
    "\27\0\14\10\3\0\1\10\1\0\2\10\1\136\6\10"+
    "\5\0\1\10\1\137\6\10\1\140\2\10\103\0\1\141"+
    "\100\0\1\142\41\0\1\143\36\0\1\144\1\145\77\0"+
    "\1\146\100\0\1\147\2\0\1\150\56\0\1\151\16\0"+
    "\1\152\3\0\1\153\111\0\1\154\1\0\1\63\3\0"+
    "\1\155\21\63\1\65\52\63\6\0\1\67\1\0\12\67"+
    "\3\0\1\67\1\0\11\67\5\0\13\67\27\0\1\67"+
    "\1\0\1\67\2\156\2\67\1\156\4\67\2\157\1\0"+
    "\1\67\1\0\11\67\5\0\13\67\32\0\2\71\2\0"+
    "\1\71\2\0\2\160\3\0\1\161\61\0\1\67\1\0"+
    "\1\67\2\73\2\67\1\73\2\67\2\70\2\0\1\71"+
    "\1\72\1\0\11\67\5\0\13\67\27\0\1\67\1\0"+
    "\1\67\1\73\1\74\2\67\1\74\2\67\2\70\2\0"+
    "\1\71\1\72\1\0\11\67\5\0\13\67\27\0\1\67"+
    "\1\0\1\67\5\162\2\67\2\162\3\0\1\67\1\0"+
    "\2\67\3\162\4\67\5\0\5\67\1\162\5\67\27\0"+
    "\14\10\3\0\1\10\1\0\4\10\1\163\4\10\5\0"+
    "\13\10\27\0\14\10\3\0\1\10\1\0\11\10\5\0"+
    "\4\10\1\164\6\10\45\0\1\165\62\0\14\10\3\0"+
    "\1\10\1\0\7\10\1\166\1\10\5\0\13\10\27\0"+
    "\14\10\3\0\1\10\1\0\11\10\5\0\3\10\1\167"+
    "\7\10\27\0\12\10\1\170\1\10\3\0\1\10\1\0"+
    "\11\10\5\0\13\10\27\0\14\10\3\0\1\10\1\0"+
    "\5\10\1\171\3\10\5\0\13\10\27\0\14\10\3\0"+
    "\1\10\1\0\11\10\5\0\6\10\1\172\4\10\27\0"+
    "\14\10\3\0\1\10\1\0\6\10\1\173\2\10\5\0"+
    "\13\10\27\0\14\10\3\0\1\10\1\0\7\10\1\174"+
    "\1\10\5\0\13\10\27\0\14\10\3\0\1\10\1\0"+
    "\5\10\1\175\3\10\5\0\13\10\27\0\14\10\3\0"+
    "\1\10\1\0\1\176\10\10\5\0\13\10\27\0\14\10"+
    "\3\0\1\10\1\0\11\10\5\0\3\10\1\177\7\10"+
    "\27\0\14\10\3\0\1\10\1\0\6\10\1\200\2\10"+
    "\5\0\13\10\61\0\1\201\44\0\1\121\5\0\1\202"+
    "\2\0\1\202\1\203\7\0\1\121\1\204\1\205\7\121"+
    "\1\206\40\0\1\123\1\207\1\210\76\123\44\124\1\211"+
    "\34\124\6\0\14\10\3\0\1\10\1\0\7\10\1\212"+
    "\1\10\5\0\13\10\27\0\14\10\3\0\1\10\1\0"+
    "\11\10\5\0\3\10\1\213\7\10\27\0\14\10\3\0"+
    "\1\10\1\0\11\10\5\0\5\10\1\214\5\10\27\0"+
    "\14\10\3\0\1\10\1\0\11\10\5\0\6\10\1\215"+
    "\4\10\27\0\14\10\3\0\1\10\1\0\6\10\1\216"+
    "\2\10\5\0\13\10\27\0\14\10\3\0\1\217\1\0"+
    "\11\10\5\0\13\10\27\0\14\10\3\0\1\10\1\0"+
    "\11\10\5\0\4\10\1\220\6\10\27\0\14\10\3\0"+
    "\1\10\1\0\5\10\1\221\3\10\5\0\13\10\27\0"+
    "\14\10\3\0\1\10\1\0\2\10\1\222\6\10\5\0"+
    "\13\10\103\0\1\223\100\0\1\224\100\0\1\225\24\0"+
    "\1\67\1\0\1\67\2\156\2\67\1\156\4\67\3\0"+
    "\1\72\1\0\11\67\5\0\13\67\32\0\2\226\2\0"+
    "\1\226\74\0\2\226\2\0\1\226\4\0\2\157\63\0"+
    "\12\10\1\227\1\10\3\0\1\10\1\0\2\10\1\230"+
    "\6\10\5\0\13\10\27\0\12\10\1\231\1\10\3\0"+
    "\1\10\1\0\11\10\5\0\13\10\27\0\12\10\1\232"+
    "\1\10\3\0\1\10\1\0\11\10\5\0\13\10\27\0"+
    "\14\10\3\0\1\10\1\0\11\10\5\0\1\10\1\233"+
    "\11\10\27\0\14\10\3\0\1\10\1\0\2\10\1\234"+
    "\6\10\5\0\13\10\27\0\14\10\3\0\1\10\1\0"+
    "\11\10\5\0\5\10\1\235\5\10\27\0\14\10\3\0"+
    "\1\10\1\0\11\10\5\0\4\10\1\236\1\10\1\237"+
    "\4\10\27\0\14\10\3\0\1\10\1\0\1\240\10\10"+
    "\5\0\13\10\27\0\14\10\3\0\1\10\1\0\11\10"+
    "\5\0\1\241\12\10\27\0\12\10\1\242\1\10\3\0"+
    "\1\10\1\0\11\10\5\0\13\10\27\0\12\10\1\243"+
    "\1\10\3\0\1\10\1\0\11\10\5\0\13\10\33\0"+
    "\1\244\2\0\1\244\74\0\5\245\2\0\2\245\7\0"+
    "\3\245\16\0\1\245\37\0\5\246\2\0\2\246\7\0"+
    "\3\246\16\0\1\246\37\0\5\247\2\0\2\247\7\0"+
    "\3\247\16\0\1\247\30\0\1\210\76\0\42\124\1\250"+
    "\1\124\1\211\34\124\6\0\14\10\3\0\1\10\1\0"+
    "\11\10\5\0\1\10\1\251\11\10\27\0\14\10\3\0"+
    "\1\10\1\0\11\10\5\0\7\10\1\252\3\10\27\0"+
    "\12\10\1\253\1\10\3\0\1\10\1\0\11\10\5\0"+
    "\13\10\27\0\14\10\3\0\1\10\1\0\1\254\10\10"+
    "\5\0\13\10\27\0\14\10\3\0\1\10\1\0\7\10"+
    "\1\255\1\10\5\0\13\10\27\0\12\10\1\256\1\10"+
    "\3\0\1\10\1\0\11\10\5\0\13\10\27\0\14\10"+
    "\3\0\1\10\1\0\7\10\1\257\1\10\5\0\4\10"+
    "\1\260\6\10\27\0\14\10\3\0\1\10\1\0\5\10"+
    "\1\261\3\10\5\0\13\10\32\0\2\226\2\0\1\226"+
    "\7\0\1\161\61\0\14\10\3\0\1\10\1\0\6\10"+
    "\1\262\2\10\5\0\13\10\27\0\14\10\3\0\1\10"+
    "\1\0\1\263\10\10\5\0\13\10\27\0\14\10\3\0"+
    "\1\10\1\0\6\10\1\264\2\10\5\0\13\10\27\0"+
    "\14\10\3\0\1\10\1\0\6\10\1\265\2\10\5\0"+
    "\13\10\27\0\14\10\3\0\1\10\1\0\11\10\5\0"+
    "\7\10\1\266\3\10\27\0\12\10\1\267\1\10\3\0"+
    "\1\10\1\0\11\10\5\0\13\10\27\0\14\10\3\0"+
    "\1\10\1\0\7\10\1\270\1\10\5\0\13\10\27\0"+
    "\14\10\3\0\1\10\1\0\6\10\1\271\2\10\5\0"+
    "\13\10\27\0\12\10\1\272\1\10\3\0\1\10\1\0"+
    "\11\10\5\0\13\10\33\0\1\121\2\0\1\121\74\0"+
    "\5\121\2\0\2\121\7\0\3\121\16\0\1\121\37\0"+
    "\5\203\2\0\2\203\7\0\3\203\16\0\1\203\37\0"+
    "\5\273\2\0\2\273\7\0\3\273\16\0\1\273\34\0"+
    "\14\10\3\0\1\10\1\0\2\10\1\274\6\10\5\0"+
    "\13\10\27\0\14\10\3\0\1\10\1\0\11\10\5\0"+
    "\5\10\1\275\5\10\27\0\14\10\3\0\1\10\1\0"+
    "\11\10\5\0\5\10\1\276\5\10\27\0\14\10\3\0"+
    "\1\10\1\0\11\10\5\0\5\10\1\277\5\10\27\0"+
    "\14\10\3\0\1\300\1\0\11\10\5\0\13\10\27\0"+
    "\14\10\3\0\1\10\1\0\7\10\1\301\1\10\5\0"+
    "\13\10\27\0\14\10\3\0\1\10\1\0\11\10\5\0"+
    "\6\10\1\302\4\10\27\0\14\10\3\0\1\10\1\0"+
    "\4\10\1\303\4\10\5\0\13\10\27\0\14\10\3\0"+
    "\1\10\1\0\7\10\1\304\1\10\5\0\13\10\27\0"+
    "\14\10\3\0\1\10\1\0\11\10\5\0\10\10\1\305"+
    "\2\10\27\0\14\10\3\0\1\10\1\0\5\10\1\306"+
    "\3\10\5\0\13\10\32\0\5\307\2\0\2\307\7\0"+
    "\3\307\16\0\1\307\34\0\14\10\3\0\1\10\1\0"+
    "\11\10\5\0\1\310\12\10\27\0\14\10\3\0\1\10"+
    "\1\0\7\10\1\311\1\10\5\0\13\10\27\0\14\10"+
    "\3\0\1\10\1\0\7\10\1\312\1\10\5\0\13\10"+
    "\27\0\14\10\3\0\1\10\1\0\11\10\5\0\10\10"+
    "\1\313\2\10\27\0\14\10\3\0\1\10\1\0\5\10"+
    "\1\314\3\10\5\0\13\10\27\0\14\10\3\0\1\10"+
    "\1\0\7\10\1\315\1\10\5\0\13\10\27\0\14\10"+
    "\3\0\1\10\1\0\2\10\1\316\6\10\5\0\13\10"+
    "\27\0\14\10\3\0\1\10\1\0\6\10\1\317\2\10"+
    "\5\0\13\10\32\0\5\204\2\0\2\204\7\0\3\204"+
    "\16\0\1\204\34\0\12\10\1\320\1\10\3\0\1\10"+
    "\1\0\11\10\5\0\13\10\27\0\14\10\3\0\1\10"+
    "\1\0\1\321\10\10\5\0\13\10\27\0\14\10\3\0"+
    "\1\10\1\0\11\10\5\0\5\10\1\322\5\10\27\0"+
    "\14\10\3\0\1\10\1\0\11\10\5\0\1\10\1\323"+
    "\11\10\27\0\12\10\1\324\1\10\3\0\1\10\1\0"+
    "\11\10\5\0\13\10\27\0\12\10\1\325\1\10\3\0"+
    "\1\10\1\0\11\10\5\0\13\10\27\0\14\10\3\0"+
    "\1\10\1\0\1\326\10\10\5\0\13\10\27\0\14\10"+
    "\3\0\1\10\1\0\11\10\5\0\1\327\12\10\27\0"+
    "\14\10\3\0\1\10\1\0\11\10\5\0\10\10\1\330"+
    "\2\10\21\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  9,  9,  9,  1,  9, 
     9,  9,  0,  9,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     9,  9,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  1,  0,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  9,  9,  9,  1,  9,  9,  1,  1,  9,  9,  9,  1,  1,  0,  0, 
     9,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  0,  0,  0,  0,  1,  1,  9,  0,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  0,  0,  0,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */

	private void ignore(String pattern, String content) {
		System.out.println("Ignorando " + pattern + ", codigo: " + content);
	}
	
	ComplexSymbolFactory symbolFactory;
    public GoLexicalAnalyzer(java.io.Reader in, ComplexSymbolFactory symbol){
    	this(in);
    	symbolFactory = symbol;
    }
  
    private Symbol symbol(int sym) {
    	System.out.println("Token " + Sym.terminalNames[sym] + ", Linha: " + yyline + ", tamanho:" + yylength());
      	return symbolFactory.newSymbol("sym", sym, new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+yylength(),yychar+yylength()));
  	}
  
  	private Symbol symbol(int sym, Object val) {
  		System.out.println("Token (" + Sym.terminalNames[sym] + ", " + val +  ") , Linha: " + yyline + ", tamanho:" + yylength());
		Location esq = new Location(yyline+1,yycolumn+1,yychar);
		Location dir = new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
		return symbolFactory.newSymbol("sym", sym, esq, dir ,val);
  	}
  	
    private Symbol symbol(int sym, Object val,int buflength) {
        System.out.println("Token (" + Sym.terminalNames[sym] + ", " + val +  ") , Linha: " + yyline + ", tamanho:" + yylength());
        Location esq = new Location(yyline+1,yycolumn+yylength()-buflength,yychar+yylength()-buflength);
        Location dir = new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
        return symbolFactory.newSymbol("sym", sym, esq, dir ,val);
    }
	
	private void reportError(String invalidPattern, int linha, int coluna) {
		System.err.println("Erro Lexico: " + invalidPattern + ", linha: " + linha + ", coluna: " + coluna);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GoLexicalAnalyzer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public GoLexicalAnalyzer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[9425];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1734) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 49: 
          {  return symbol(Sym.OREQ, "|=");  }
        case 217: break;
        case 48: 
          {  return symbol(Sym.OROR, "||");  }
        case 218: break;
        case 45: 
          {  return symbol(Sym.RBRACE, "}");  }
        case 219: break;
        case 44: 
          {  return symbol(Sym.LBRACE, "{");  }
        case 220: break;
        case 43: 
          {  return symbol(Sym.RBRACK, "]");  }
        case 221: break;
        case 42: 
          {  return symbol(Sym.LBRACK, "[");  }
        case 222: break;
        case 41: 
          {  return symbol(Sym.RPAREN, ")");  }
        case 223: break;
        case 40: 
          {  return symbol(Sym.LPAREN, "(");  }
        case 224: break;
        case 38: 
          {  return symbol(Sym.COMMA, ",");  }
        case 225: break;
        case 14: 
          {  return symbol(Sym.MINUS, "-");  }
        case 226: break;
        case 33: 
          {  return symbol(Sym.EQUAL, "=");  }
        case 227: break;
        case 35: 
          {  return symbol(Sym.COLON, ":");  }
        case 228: break;
        case 84: 
          {  return symbol(Sym.DIVEQ, "/=");  }
        case 229: break;
        case 85: 
          {  return symbol(Sym.XOREQ, "^=");  }
        case 230: break;
        case 96: 
          {  return symbol(Sym.NOTEQ, "!=");  }
        case 231: break;
        case 97: 
          {  return symbol(Sym.EQEQ, "==");  }
        case 232: break;
        case 99: 
          {  return symbol(Sym.LTEQ, "<=");  }
        case 233: break;
        case 102: 
          {  return symbol(Sym.GTEQ, ">=");  }
        case 234: break;
        case 105: 
          {  return symbol(Sym.ANDEQ, "&=");  }
        case 235: break;
        case 122: 
          {  return symbol(Sym.FOR, "for");  }
        case 236: break;
        case 127: 
          {  return symbol(Sym.VAR, "var");  }
        case 237: break;
        case 138: 
          {  return symbol(Sym.MAP, "map");  }
        case 238: break;
        case 176: 
          {  return symbol(Sym.CHAN, "chan");  }
        case 239: break;
        case 173: 
          {  return symbol(Sym.CASE, "case");  }
        case 240: break;
        case 36: 
          {  return symbol(Sym.GREATER, ">");  }
        case 241: break;
        case 64: 
          {  return symbol(Sym.PLUSEQ, "+=");  }
        case 242: break;
        case 66: 
          {  return symbol(Sym.MINUSEQ, "-=");  }
        case 243: break;
        case 82: 
        case 134: 
        case 135: 
          {  ignore("Comentario em linha", yytext());  }
        case 244: break;
        case 86: 
          {  return symbol(Sym.MULTEQ, "*=");  }
        case 245: break;
        case 98: 
          {  return symbol(Sym.CHANNEL, "<-");  }
        case 246: break;
        case 100: 
          {  return symbol(Sym.LSHIFT, "<<");  }
        case 247: break;
        case 103: 
          {  return symbol(Sym.RSHIFT, ">>");  }
        case 248: break;
        case 104: 
          {  return symbol(Sym.ANDNOT, "&^");  }
        case 249: break;
        case 106: 
          {  return symbol(Sym.ANDAND, "&&");  }
        case 250: break;
        case 152: 
          {  return symbol(Sym.ELSE, "else");  }
        case 251: break;
        case 156: 
          {  return symbol(Sym.FUNC, "func");  }
        case 252: break;
        case 161: 
          {  return symbol(Sym.TRUE, "true");  }
        case 253: break;
        case 162: 
          {  return symbol(Sym.TYPE, "type");  }
        case 254: break;
        case 167: 
          {  ignore("Comentario em bloco", yytext());  }
        case 255: break;
        case 168: 
          {  return symbol(Sym.GOTO, "goto");  }
        case 256: break;
        case 54: 
        case 55: 
        case 58: 
        case 60: 
          {  reportError(yytext(), yyline + 1, yycolumn + 1);  }
        case 257: break;
        case 1: 
        case 5: 
        case 6: 
        case 22: 
          {  reportError(yytext(), yyline + 1, yycolumn + 1);  }
        case 258: break;
        case 9: 
        case 10: 
        case 59: 
        case 113: 
          {  return symbol(Sym.INT_LITERAL, yytext());  }
        case 259: break;
        case 202: 
          {  return symbol(Sym.SWITCH, "switch");  }
        case 260: break;
        case 201: 
          {  return symbol(Sym.STRUCT, "struct");  }
        case 261: break;
        case 200: 
          {  return symbol(Sym.SELECT, "select");  }
        case 262: break;
        case 47: 
          {  return symbol(Sym.HASH, "#");  }
        case 263: break;
        case 37: 
          {  return symbol(Sym.AND, "&");  }
        case 264: break;
        case 13: 
          {  return symbol(Sym.PLUS, "+");  }
        case 265: break;
        case 15: 
          {  return symbol(Sym.DOT, ".");  }
        case 266: break;
        case 23: 
          {  return symbol(Sym.DIV, "/");  }
        case 267: break;
        case 24: 
          {  return symbol(Sym.XOR, "^");  }
        case 268: break;
        case 25: 
          {  return symbol(Sym.MULT, "*");  }
        case 269: break;
        case 31: 
          {  return symbol(Sym.MOD, "%");  }
        case 270: break;
        case 32: 
          {  return symbol(Sym.NOT, "!");  }
        case 271: break;
        case 34: 
          {  return symbol(Sym.LESS, "<");  }
        case 272: break;
        case 68: 
          {  return symbol(Sym.IF, "if");  }
        case 273: break;
        case 87: 
          {  return symbol(Sym.GO, "go");  }
        case 274: break;
        case 197: 
          {  return symbol(Sym.RETURN, "return");  }
        case 275: break;
        case 211: 
          {  return symbol(Sym.CONTINUE, "continue");  }
        case 276: break;
        case 51: 
        case 108: 
          {  return symbol(Sym.STRING_LITERAL, yytext());  }
        case 277: break;
        case 46: 
          {  return symbol(Sym.INTERROGATION, "?");  }
        case 278: break;
        case 65: 
          {  return symbol(Sym.MINUSMINUS, "--");  }
        case 279: break;
        case 195: 
          {  return symbol(Sym.IMPORT, "import");  }
        case 280: break;
        case 215: 
          {  return symbol(Sym.FALLTHROUGH, "fallthrough");  }
        case 281: break;
        case 57: 
        case 112: 
          {  return symbol(Sym.IMG_LITERAL, yytext());  }
        case 282: break;
        case 212: 
          {  return symbol(Sym.INTERFACE, "interface");  }
        case 283: break;
        case 204: 
          {  return symbol(Sym.DEFAULT, "default");  }
        case 284: break;
        case 7: 
        case 11: 
        case 12: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 61: 
        case 62: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 114: 
        case 115: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 137: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 150: 
        case 151: 
        case 153: 
        case 154: 
        case 155: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 174: 
        case 175: 
        case 178: 
        case 179: 
        case 180: 
        case 183: 
        case 184: 
        case 187: 
        case 188: 
        case 189: 
        case 190: 
        case 191: 
        case 193: 
        case 194: 
        case 196: 
        case 199: 
        case 203: 
        case 205: 
        case 206: 
        case 208: 
        case 209: 
        case 210: 
        case 213: 
        case 214: 
          {  return symbol(Sym.IDENTIFIER, yytext());  }
        case 285: break;
        case 107: 
          {  return symbol(Sym.DOUBLE_INTERROGATION, "??");  }
        case 286: break;
        case 128: 
        case 133: 
          {  return symbol(Sym.RUNE_LITERAL, yytext());  }
        case 287: break;
        case 207: 
          {  return symbol(Sym.PACKAGE, "package");  }
        case 288: break;
        case 56: 
        case 109: 
        case 149: 
          {  return symbol(Sym.FLOAT_LITERAL, yytext());  }
        case 289: break;
        case 8: 
          {  return symbol(Sym.BLANK_IDENTIFIER, "_");  }
        case 290: break;
        case 192: 
          {  return symbol(Sym.CONST, "const");  }
        case 291: break;
        case 185: 
          {  return symbol(Sym.RANGE, "range");  }
        case 292: break;
        case 182: 
          {  return symbol(Sym.FALSE, "false");  }
        case 293: break;
        case 181: 
          {  return symbol(Sym.BREAK, "break");  }
        case 294: break;
        case 177: 
          {  return symbol(Sym.DEFER, "defer");  }
        case 295: break;
        case 39: 
          {  return symbol(Sym.SEMICOLON, ";");  }
        case 296: break;
        case 63: 
          {  return symbol(Sym.PLUSPLUS, "++");  }
        case 297: break;
        case 101: 
          {  return symbol(Sym.CHANNELEQ, ":=");  }
        case 298: break;
        case 116: 
          {  return symbol(Sym.SUSPOINTS,"...");  }
        case 299: break;
        case 146: 
          {  return symbol(Sym.LSHIFTEQ, "<<=");  }
        case 300: break;
        case 147: 
          {  return symbol(Sym.RSHIFTEQ, ">>=");  }
        case 301: break;
        case 148: 
          {  return symbol(Sym.ANDNOTEQ, "&^=");  }
        case 302: break;
        case 4: 
          {  return symbol(Sym.OR, "|");  }
        case 303: break;
        case 2: 
        case 3: 
          {  }
        case 304: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {      return symbolFactory.newSymbol("EOF", Sym.EOF, new Location(yyline+1, yycolumn+1), new Location(yyline+1, yycolumn+1));
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
