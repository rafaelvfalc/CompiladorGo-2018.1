
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 11 15:07:44 BRT 2018
//----------------------------------------------------

package lexicalanalyzer.go;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 11 15:07:44 BRT 2018
  */
public class GoParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public GoParser() {super();}

  /** Constructor which sets the default scanner. */
  public GoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0180\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\003\000\002\006\003\000\002\007\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\004\000\002" +
    "\012\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\005\000\002\014\003\000\002\014\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\017\006\000\002\026\003\000\002\027\003\000\002\024" +
    "\005\000\002\020\006\000\002\032\004\000\002\031\002" +
    "\000\002\031\004\000\002\033\004\000\002\033\003\000" +
    "\002\034\002\000\002\034\003\000\002\036\004\000\002" +
    "\040\002\000\002\040\003\000\002\037\003\000\002\021" +
    "\004\000\002\041\003\000\002\022\004\000\002\042\004" +
    "\000\002\044\002\000\002\044\003\000\002\045\003\000" +
    "\002\045\003\000\002\043\005\000\002\047\002\000\002" +
    "\047\003\000\002\046\002\000\002\046\004\000\002\050" +
    "\004\000\002\053\004\000\002\052\002\000\002\052\003" +
    "\000\002\052\004\000\002\051\005\000\002\054\002\000" +
    "\002\054\003\000\002\055\002\000\002\055\003\000\002" +
    "\023\006\000\002\056\002\000\002\056\003\000\002\056" +
    "\004\000\002\057\004\000\002\057\003\000\002\060\003" +
    "\000\002\062\003\000\002\025\007\000\002\061\003\000" +
    "\002\063\005\000\002\064\003\000\002\065\002\000\002" +
    "\065\003\000\002\065\004\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\073\003\000\002\073\003" +
    "\000\002\073\003\000\002\070\004\000\002\100\002\000" +
    "\002\100\003\000\002\100\004\000\002\077\005\000\002" +
    "\076\003\000\002\076\003\000\002\101\004\000\002\103" +
    "\002\000\002\103\003\000\002\102\002\000\002\102\005" +
    "\000\002\035\004\000\002\106\004\000\002\105\002\000" +
    "\002\105\003\000\002\105\004\000\002\104\004\000\002" +
    "\107\004\000\002\110\002\000\002\110\003\000\002\110" +
    "\004\000\002\071\004\000\002\112\002\000\002\112\003" +
    "\000\002\112\004\000\002\111\005\000\002\114\003\000" +
    "\002\114\003\000\002\113\003\000\002\113\003\000\002" +
    "\115\005\000\002\116\004\000\002\072\004\000\002\121" +
    "\002\000\002\121\003\000\002\121\004\000\002\120\005" +
    "\000\002\117\003\000\002\117\003\000\002\122\004\000" +
    "\002\125\004\000\002\124\002\000\002\124\003\000\002" +
    "\123\004\000\002\123\003\000\002\126\005\000\002\074" +
    "\006\000\002\130\002\000\002\130\003\000\002\127\003" +
    "\000\002\132\003\000\002\075\007\000\002\134\002\000" +
    "\002\134\003\000\002\133\003\000\002\135\003\000\002" +
    "\135\003\000\002\135\005\000\002\136\003\000\002\136" +
    "\003\000\002\136\003\000\002\140\003\000\002\140\003" +
    "\000\002\140\003\000\002\140\003\000\002\137\003\000" +
    "\002\137\003\000\002\016\005\000\002\141\004\000\002" +
    "\144\003\000\002\144\003\000\002\144\006\000\002\144" +
    "\003\000\002\144\003\000\002\144\003\000\002\145\005" +
    "\000\002\146\002\000\002\146\003\000\002\147\002\000" +
    "\002\147\004\000\002\150\004\000\002\151\004\000\002" +
    "\152\002\000\002\152\003\000\002\152\004\000\002\154" +
    "\004\000\002\155\004\000\002\156\002\000\002\156\003" +
    "\000\002\153\003\000\002\153\003\000\002\153\003\000" +
    "\002\157\003\000\002\160\003\000\002\160\003\000\002" +
    "\142\005\000\002\161\003\000\002\161\003\000\002\161" +
    "\003\000\002\161\004\000\002\161\004\000\002\161\004" +
    "\000\002\161\004\000\002\161\004\000\002\164\004\000" +
    "\002\165\005\000\002\166\007\000\002\166\011\000\002" +
    "\171\002\000\002\171\003\000\002\167\006\000\002\170" +
    "\005\000\002\172\002\000\002\172\004\000\002\173\003" +
    "\000\002\173\004\000\002\174\002\000\002\174\003\000" +
    "\002\175\002\000\002\175\003\000\002\176\005\000\002" +
    "\177\002\000\002\177\003\000\002\163\005\000\002\200" +
    "\003\000\002\030\003\000\002\030\005\000\002\201\003" +
    "\000\002\201\004\000\002\202\003\000\002\202\003\000" +
    "\002\202\003\000\002\202\003\000\002\202\003\000\002" +
    "\203\003\000\002\203\003\000\002\203\003\000\002\203" +
    "\003\000\002\203\003\000\002\203\003\000\002\205\003" +
    "\000\002\205\003\000\002\205\003\000\002\205\003\000" +
    "\002\206\003\000\002\206\003\000\002\206\003\000\002" +
    "\206\003\000\002\206\003\000\002\206\003\000\002\206" +
    "\003\000\002\204\003\000\002\204\003\000\002\204\003" +
    "\000\002\204\003\000\002\204\003\000\002\204\003\000" +
    "\002\162\007\000\002\207\002\000\002\207\003\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\066\003\000\002\066\003" +
    "\000\002\066\003\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003\000\002\211\003\000\002\211" +
    "\003\000\002\211\003\000\002\211\003\000\002\211\003" +
    "\000\002\225\002\000\002\210\005\000\002\232\003\000" +
    "\002\226\003\000\002\230\004\000\002\227\003\000\002" +
    "\227\003\000\002\231\005\000\002\233\004\000\002\234" +
    "\002\000\002\234\003\000\002\234\003\000\002\220\007" +
    "\000\002\235\002\000\002\235\003\000\002\236\003\000" +
    "\002\236\003\000\002\237\004\000\002\240\002\000\002" +
    "\240\003\000\002\221\003\000\002\221\003\000\002\241" +
    "\010\000\002\243\002\000\002\243\003\000\002\244\002" +
    "\000\002\244\003\000\002\245\002\000\002\245\003\000" +
    "\002\245\004\000\002\246\005\000\002\247\004\000\002" +
    "\247\003\000\002\242\010\000\002\250\002\000\002\250" +
    "\003\000\002\252\002\000\002\252\003\000\002\252\004" +
    "\000\002\251\010\000\002\255\004\000\002\254\002\000" +
    "\002\254\003\000\002\253\005\000\002\256\004\000\002" +
    "\256\003\000\002\257\004\000\002\260\004\000\002\261" +
    "\002\000\002\261\003\000\002\261\004\000\002\223\005" +
    "\000\002\262\003\000\002\262\003\000\002\262\003\000" +
    "\002\263\002\000\002\263\003\000\002\264\003\000\002" +
    "\265\007\000\002\267\002\000\002\267\003\000\002\270" +
    "\002\000\002\270\003\000\002\271\002\000\002\271\003" +
    "\000\002\272\003\000\002\273\003\000\002\266\005\000" +
    "\002\274\004\000\002\274\004\000\002\275\002\000\002" +
    "\275\003\000\002\212\004\000\002\222\006\000\002\276" +
    "\002\000\002\276\003\000\002\276\004\000\002\277\005" +
    "\000\002\300\004\000\002\300\003\000\002\301\004\000" +
    "\002\302\004\000\002\302\004\000\002\303\002\000\002" +
    "\303\003\000\002\304\003\000\002\213\004\000\002\305" +
    "\002\000\002\305\003\000\002\214\004\000\002\306\002" +
    "\000\002\306\003\000\002\215\004\000\002\307\002\000" +
    "\002\307\003\000\002\216\004\000\002\217\003\000\002" +
    "\224\004\000\002\310\002\000\002\310\003\000\002\311" +
    "\004\000\002\143\003\000\002\143\005\000\002\312\002" +
    "\000\002\312\003\000\002\313\003\000\002\313\004\000" +
    "\002\314\004\000\002\314\007\000\002\315\004\000\002" +
    "\316\005\000\002\316\007\000\002\317\002\000\002\317" +
    "\004\000\002\320\002\000\002\320\003\000\002\321\003" +
    "\000\002\321\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\043\000\010\002\ufe95\022\ufe95\025\006\001\002\000" +
    "\006\002\ufe90\022\016\001\002\000\006\002\ufe94\022\ufe94" +
    "\001\002\000\004\134\011\001\002\000\004\002\010\001" +
    "\002\000\004\002\001\001\002\000\012\002\uffff\022\uffff" +
    "\072\uffff\171\uffff\001\002\000\010\002\ufe92\022\ufe92\072" +
    "\ufe92\001\002\000\010\002\ufe93\022\ufe93\072\014\001\002" +
    "\000\004\134\011\001\002\000\010\002\ufe91\022\ufe91\072" +
    "\ufe91\001\002\000\012\062\027\072\030\170\025\171\ufe85" +
    "\001\002\000\004\002\000\001\002\000\006\002\ufe8e\022" +
    "\016\001\002\000\004\002\ufe8f\001\002\000\004\002\ufe8d" +
    "\001\002\000\004\171\ufe84\001\002\000\006\002\ufe8c\022" +
    "\ufe8c\001\002\000\004\171\ufe82\001\002\000\004\171\036" +
    "\001\002\000\010\072\030\170\025\171\ufe85\001\002\000" +
    "\004\171\ufe83\001\002\000\012\063\ufe87\072\030\170\025" +
    "\171\ufe85\001\002\000\012\063\ufe87\072\030\170\025\171" +
    "\ufe85\001\002\000\004\063\034\001\002\000\006\002\ufe8b" +
    "\022\ufe8b\001\002\000\004\063\ufe86\001\002\000\012\072" +
    "\030\134\011\170\025\171\ufe85\001\002\000\016\002\ufe8a" +
    "\022\ufe8a\063\ufe8a\072\ufe8a\170\ufe8a\171\ufe8a\001\002\000" +
    "\004\072\043\001\002\000\004\171\042\001\002\000\016" +
    "\002\ufe89\022\ufe89\063\ufe89\072\ufe89\170\ufe89\171\ufe89\001" +
    "\002\000\004\134\011\001\002\000\004\171\045\001\002" +
    "\000\016\002\ufe88\022\ufe88\063\ufe88\072\ufe88\170\ufe88\171" +
    "\ufe88\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\043\000\010\002\006\310\003\311\004\001\001\000" +
    "\010\312\016\313\020\314\017\001\001\000\002\001\001" +
    "\000\006\003\011\143\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\014\001\001\000\002\001\001\000" +
    "\010\315\023\320\025\321\022\001\001\000\002\001\001" +
    "\000\006\313\021\314\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\316\036\001\001\000\010\315\030\320" +
    "\025\321\022\001\001\000\002\001\001\000\012\315\031" +
    "\317\032\320\025\321\022\001\001\000\012\315\031\317" +
    "\034\320\025\321\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\040\315\037\320" +
    "\025\321\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\043\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GoParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left  == 0) {
                m.append(" in line "+(s.left - 1));
                if (s.right  == 0)
                    m.append(", column "+(s.right - 1));
            }
        }

        m.append(" : "+message);

        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$GoParser$actions {
  private final GoParser parser;

  /** Constructor */
  CUP$GoParser$actions(GoParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$GoParser$do_action(
    int                        CUP$GoParser$act_num,
    java_cup.runtime.lr_parser CUP$GoParser$parser,
    java.util.Stack            CUP$GoParser$stack,
    int                        CUP$GoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GoParser$result;

      /* select the action based on the action number */
      switch (CUP$GoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // import_clause_aux_2 ::= UNDERSCORE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause_aux_2",207, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // import_clause_aux_2 ::= DOT 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause_aux_2",207, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // import_clause_aux ::= import_clause_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause_aux",206, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // import_clause_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause_aux",206, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // import_name_aux_2 ::= import_name import_name_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_name_aux_2",205, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // import_name_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_name_aux_2",205, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // import_name_aux ::= QUOTE import_name DOT identifier QUOTE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_name_aux",204, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // import_name_aux ::= QUOTE identifier QUOTE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_name_aux",204, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // import_name ::= import_clause_aux import_name_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_name",203, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // import_clause ::= IMPORT LPAREN import_name import_name_aux_2 RPAREN 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause",202, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // import_clause ::= IMPORT import_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause",202, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // import_clause_e ::= import_clause import_clause_e 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause_e",201, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // import_clause_e ::= import_clause 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause_e",201, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // import_clause_e_aux ::= import_clause_e 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause_e_aux",200, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // import_clause_e_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause_e_aux",200, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // package_name ::= package_name DOT identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("package_name",97, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // package_name ::= identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("package_name",97, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // package_clause ::= PACKAGE package_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("package_clause",199, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // package_clause_aux ::= package_clause 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("package_clause_aux",198, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // package_clause_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("package_clause_aux",198, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // defer_stmt ::= DEFER expression 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("defer_stmt",146, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // fallthrough_stmt ::= FALLTHROUGH 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("fallthrough_stmt",141, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // goto_stmt ::= GOTO label 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("goto_stmt",140, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // continue_stmt_aux ::= label 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("continue_stmt_aux",197, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // continue_stmt_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("continue_stmt_aux",197, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // continue_stmt ::= CONTINUE continue_stmt_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("continue_stmt",139, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // break_stmt_aux ::= label 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("break_stmt_aux",196, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // break_stmt_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("break_stmt_aux",196, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // break_stmt ::= BREAK break_stmt_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("break_stmt",138, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // return_stmt_aux ::= expression_list 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("return_stmt_aux",195, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // return_stmt_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("return_stmt_aux",195, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // return_stmt ::= RETURN return_stmt_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("return_stmt",137, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // recv_expr ::= expression 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("recv_expr",194, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // recv_stmt_aux_2 ::= recv_stmt_aux_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("recv_stmt_aux_2",193, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // recv_stmt_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("recv_stmt_aux_2",193, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // recv_stmt_aux_1 ::= identifier_list DECEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("recv_stmt_aux_1",192, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // recv_stmt_aux_1 ::= expression_list EQUAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("recv_stmt_aux_1",192, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // recv_stmt ::= recv_stmt_aux_2 recv_expr 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("recv_stmt",191, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // comm_case ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("comm_case",190, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // comm_case ::= CASE recv_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("comm_case",190, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // comm_clause ::= comm_case COLON statement_list 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("comm_clause",189, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // select_stmt_aux ::= comm_clause select_stmt_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("select_stmt_aux",188, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // select_stmt_aux ::= comm_clause 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("select_stmt_aux",188, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // select_stmt_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("select_stmt_aux",188, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // select_stmt ::= SELECT LBRACE select_stmt_aux RBRACE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("select_stmt",144, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-3)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // go_stmt ::= GO expression 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("go_stmt",136, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // range_clause_aux_2 ::= range_clause_aux_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("range_clause_aux_2",187, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // range_clause_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("range_clause_aux_2",187, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // range_clause_aux_1 ::= identifier_list DECEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("range_clause_aux_1",186, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // range_clause_aux_1 ::= expression_list EQUAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("range_clause_aux_1",186, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // range_clause ::= range_clause_aux_2 RANGE expression 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("range_clause",180, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // post_stmt ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("post_stmt",185, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // init_stmt ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("init_stmt",184, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // for_clause_aux_3 ::= post_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("for_clause_aux_3",183, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // for_clause_aux_3 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("for_clause_aux_3",183, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // for_clause_aux_2 ::= condition 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("for_clause_aux_2",182, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // for_clause_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("for_clause_aux_2",182, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // for_clause_aux_1 ::= init_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("for_clause_aux_1",181, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // for_clause_aux_1 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("for_clause_aux_1",181, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // for_clause ::= for_clause_aux_1 SEMICOLON for_clause_aux_2 SEMICOLON for_clause_aux_3 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("for_clause",179, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // condition ::= expression 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("condition",178, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // for_stmt_aux_2 ::= for_stmt_aux_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("for_stmt_aux_2",177, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // for_stmt_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("for_stmt_aux_2",177, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // for_stmt_aux_1 ::= range_clause 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("for_stmt_aux_1",176, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // for_stmt_aux_1 ::= for_clause 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("for_stmt_aux_1",176, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // for_stmt_aux_1 ::= condition 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("for_stmt_aux_1",176, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // for_stmt ::= FOR for_stmt_aux_1 block 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("for_stmt",145, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // type_list_aux_2 ::= type_list_aux_1 type_list_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_list_aux_2",175, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // type_list_aux_2 ::= type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_list_aux_2",175, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // type_list_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_list_aux_2",175, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // type_list_aux_1 ::= COMMA type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_list_aux_1",174, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // type_list ::= type type_list_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_list",173, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // type_switch_case ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_switch_case",172, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // type_switch_case ::= CASE type_list 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_switch_case",172, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // type_case_clause ::= type_switch_case COLON statement_list 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_case_clause",169, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // type_switch_guard_aux_2 ::= type_switch_guard_aux_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_switch_guard_aux_2",170, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // type_switch_guard_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_switch_guard_aux_2",170, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // type_switch_guard_aux_1 ::= identifier DECEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_switch_guard_aux_1",171, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // type_switch_guard ::= type_switch_guard_aux_2 primary_expr DOT LPAREN TYPE RPAREN 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_switch_guard",167, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-5)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // type_switch_stmt_aux_2 ::= type_switch_stmt_aux_2 type_case_clause 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_switch_stmt_aux_2",168, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // type_switch_stmt_aux_2 ::= type_case_clause 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_switch_stmt_aux_2",168, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // type_switch_stmt_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_switch_stmt_aux_2",168, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // type_switch_stmt_aux_1 ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_switch_stmt_aux_1",166, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // type_switch_stmt_aux_1 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_switch_stmt_aux_1",166, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // type_switch_stmt ::= SWITCH type_switch_stmt_aux_1 type_switch_guard LBRACE type_switch_stmt_aux_2 RBRACE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_switch_stmt",160, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-5)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // expr_switch_case ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expr_switch_case",165, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // expr_switch_case ::= CASE expression_list 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expr_switch_case",165, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // expr_case_clause ::= expr_switch_case COLON statement_list 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expr_case_clause",164, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // expr_switch_stmt_aux_3 ::= expr_switch_stmt_aux_3 expr_case_clause 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt_aux_3",163, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // expr_switch_stmt_aux_3 ::= expr_case_clause 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt_aux_3",163, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // expr_switch_stmt_aux_3 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt_aux_3",163, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // expr_switch_stmt_aux_2 ::= expression 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt_aux_2",162, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // expr_switch_stmt_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt_aux_2",162, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // expr_switch_stmt_aux_1 ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt_aux_1",161, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // expr_switch_stmt_aux_1 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt_aux_1",161, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // expr_switch_stmt ::= SWITCH expr_switch_stmt_aux_1 expr_switch_stmt_aux_2 LBRACE expr_switch_stmt_aux_3 RBRACE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt",159, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-5)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // switch_stmt ::= type_switch_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("switch_stmt",143, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // switch_stmt ::= expr_switch_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("switch_stmt",143, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // if_stmt_aux_4 ::= if_stmt_aux_3 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("if_stmt_aux_4",158, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // if_stmt_aux_4 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("if_stmt_aux_4",158, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // if_stmt_aux_3 ::= ELSE if_stmt_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("if_stmt_aux_3",157, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // if_stmt_aux_2 ::= block 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("if_stmt_aux_2",156, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // if_stmt_aux_2 ::= if_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("if_stmt_aux_2",156, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // if_stmt_aux_1 ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("if_stmt_aux_1",155, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // if_stmt_aux_1 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("if_stmt_aux_1",155, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // if_stmt ::= IF if_stmt_aux_1 expression block if_stmt_aux_4 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("if_stmt",142, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // assign_op_aux ::= mul_op 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op_aux",154, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // assign_op_aux ::= add_op 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op_aux",154, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // assign_op_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op_aux",154, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // assign_op ::= assign_op_aux EQUAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op",153, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // assignment ::= expression_list assign_op expression_list 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assignment",151, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // inc_dec_stmt_aux ::= MINUSMINUS 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("inc_dec_stmt_aux",149, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // inc_dec_stmt_aux ::= PLUSPLUS 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("inc_dec_stmt_aux",149, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // inc_dec_stmt ::= expression inc_dec_stmt_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("inc_dec_stmt",150, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expression_stmt ::= expression 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expression_stmt",148, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // label ::= identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("label",152, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // labeled_stmt ::= label COLON statement 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("labeled_stmt",134, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // empty_stmt ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("empty_stmt",147, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // simple_stmt ::= short_var_decl 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("simple_stmt",135, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // simple_stmt ::= assignment 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("simple_stmt",135, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // simple_stmt ::= inc_dec_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("simple_stmt",135, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // simple_stmt ::= expression_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("simple_stmt",135, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // simple_stmt ::= empty_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("simple_stmt",135, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // statement ::= defer_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // statement ::= for_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // statement ::= select_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // statement ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // statement ::= if_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // statement ::= block 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // statement ::= fallthrough_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // statement ::= goto_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // statement ::= continue_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // statement ::= break_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // statement ::= return_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // statement ::= go_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // statement ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // statement ::= labeled_stmt 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // statement ::= declaration 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // conversion_aux ::= COMMA 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("conversion_aux",133, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // conversion_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("conversion_aux",133, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // conversion ::= type LPAREN expression conversion_aux RPAREN 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("conversion",112, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // unary_op ::= AND 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("unary_op",130, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // unary_op ::= MULT 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("unary_op",130, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // unary_op ::= XOR 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("unary_op",130, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // unary_op ::= NOT 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("unary_op",130, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // unary_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("unary_op",130, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // unary_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("unary_op",130, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // mul_op ::= ANDNOT 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("mul_op",132, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // mul_op ::= AND 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("mul_op",132, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // mul_op ::= RSHIFT 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("mul_op",132, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // mul_op ::= LSHIFT 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("mul_op",132, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // mul_op ::= MOD 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("mul_op",132, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // mul_op ::= DIV 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("mul_op",132, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // mul_op ::= MULT 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("mul_op",132, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // add_op ::= XOR 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("add_op",131, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // add_op ::= OR 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("add_op",131, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // add_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("add_op",131, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // add_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("add_op",131, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // rel_op ::= GTEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("rel_op",129, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // rel_op ::= GREATER 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("rel_op",129, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // rel_op ::= LTEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("rel_op",129, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // rel_op ::= LESS 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("rel_op",129, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // rel_op ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("rel_op",129, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // rel_op ::= EQEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("rel_op",129, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // binary_op ::= mul_op 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("binary_op",128, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // binary_op ::= add_op 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("binary_op",128, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // binary_op ::= rel_op 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("binary_op",128, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // binary_op ::= ANDAND 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("binary_op",128, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // binary_op ::= OROR 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("binary_op",128, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // unary_expr ::= unary_op unary_expr 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("unary_expr",127, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // unary_expr ::= primary_expr 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("unary_expr",127, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expression ::= expression binary_op expression 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expression ::= unary_expr 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // receiver_type ::= type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("receiver_type",126, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // method_expr ::= receiver_type DOT method_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("method_expr",113, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // arguments_aux_6 ::= arguments_aux_5 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("arguments_aux_6",125, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // arguments_aux_6 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("arguments_aux_6",125, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // arguments_aux_5 ::= arguments_aux_2 arguments_aux_3 arguments_aux_4 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("arguments_aux_5",124, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // arguments_aux_4 ::= COMMA 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("arguments_aux_4",123, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // arguments_aux_4 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("arguments_aux_4",123, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // arguments_aux_3 ::= SUSPOINTS 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("arguments_aux_3",122, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // arguments_aux_3 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("arguments_aux_3",122, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // arguments_aux_2 ::= type arguments_aux_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("arguments_aux_2",121, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // arguments_aux_2 ::= expression_list 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("arguments_aux_2",121, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // arguments_aux_1 ::= COMMA expression_list 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("arguments_aux_1",120, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // arguments_aux_1 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("arguments_aux_1",120, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // arguments ::= LPAREN arguments_aux_6 RPAREN 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("arguments",118, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // type_assertion ::= DOT LPAREN type RPAREN 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_assertion",117, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-3)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // slice_aux_1 ::= expression 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("slice_aux_1",119, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // slice_aux_1 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("slice_aux_1",119, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // slice ::= LBRACK slice_aux_1 COLON expression COLON expression RBRACE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("slice",116, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-6)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // slice ::= LBRACK slice_aux_1 COLON slice_aux_1 RBRACK 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("slice",116, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // index ::= LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("index",115, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // selector ::= DOT identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("selector",114, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // primary_expr ::= primary_expr arguments 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("primary_expr",111, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // primary_expr ::= primary_expr type_assertion 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("primary_expr",111, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // primary_expr ::= primary_expr slice 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("primary_expr",111, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // primary_expr ::= primary_expr index 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("primary_expr",111, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // primary_expr ::= primary_expr selector 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("primary_expr",111, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // primary_expr ::= method_expr 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("primary_expr",111, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // primary_expr ::= conversion 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("primary_expr",111, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // primary_expr ::= operand 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("primary_expr",111, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // function_lit ::= FUNC signature function_body 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("function_lit",96, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // element ::= literal_value 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("element",110, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // element ::= expression 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("element",110, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // field_name ::= identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("field_name",109, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // key ::= literal_value 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("key",105, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // key ::= expression 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("key",105, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // key ::= field_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("key",105, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // keyed_element_aux_2 ::= keyed_element_aux_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("keyed_element_aux_2",108, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // keyed_element_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("keyed_element_aux_2",108, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // keyed_element_aux_1 ::= key COLON 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("keyed_element_aux_1",107, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // keyed_element ::= keyed_element_aux_2 element 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("keyed_element",106, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // element_list_aux_2 ::= keyed_element element_list_aux_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("element_list_aux_2",104, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // element_list_aux_2 ::= keyed_element 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("element_list_aux_2",104, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // element_list_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("element_list_aux_2",104, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // element_list_aux_1 ::= COMMA keyed_element 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("element_list_aux_1",103, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // element_list ::= keyed_element element_list_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("element_list",102, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // literal_value_aux_2 ::= element_list literal_value_aux_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("literal_value_aux_2",101, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // literal_value_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("literal_value_aux_2",101, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // literal_value_aux_1 ::= COMMA 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("literal_value_aux_1",100, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // literal_value_aux_1 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("literal_value_aux_1",100, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // literal_value ::= LBRACE literal_value_aux_2 RBRACE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("literal_value",99, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // literal_type ::= type_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("literal_type",98, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // literal_type ::= map_type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("literal_type",98, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // literal_type ::= slice_type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("literal_type",98, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // literal_type ::= LBRACK SUSPOINTS RBRACK element_type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("literal_type",98, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-3)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // literal_type ::= array_type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("literal_type",98, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // literal_type ::= struct_type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("literal_type",98, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // composite_lit ::= literal_type literal_value 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("composite_lit",95, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // qualified_ident ::= package_name DOT identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("qualified_ident",12, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // operand_name ::= qualified_ident 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("operand_name",93, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // operand_name ::= identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("operand_name",93, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // basic_lit ::= string_lit 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("basic_lit",94, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // basic_lit ::= imaginary_lit 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("basic_lit",94, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // basic_lit ::= float_lit 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("basic_lit",94, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // basic_lit ::= int_lit 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("basic_lit",94, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // literal ::= function_lit 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("literal",92, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // literal ::= composite_lit 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("literal",92, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // literal ::= basic_lit 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("literal",92, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // operand ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("operand",91, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // operand ::= operand_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("operand",91, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // operand ::= literal 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("operand",91, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // receiver ::= parameters 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("receiver",89, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // method_decl_aux ::= fuction_body 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("method_decl_aux",90, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // method_decl_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("method_decl_aux",90, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // method_decl ::= FUNC receiver method_name signature method_decl_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("method_decl",59, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // function_body ::= block 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("function_body",88, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // function_name ::= identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("function_name",85, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // function_decl_aux ::= fuction_body 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("function_decl_aux",86, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // function_decl_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("function_decl_aux",86, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // function_decl ::= FUNC function_name signature function_decl_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("function_decl",58, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-3)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // short_var_decl ::= identifier_list DECEQ expression_list 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("short_var_decl",84, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // var_spec_aux_3 ::= var_spec_aux_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("var_spec_aux_3",81, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // var_spec_aux_3 ::= type var_spec_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("var_spec_aux_3",81, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // var_spec_aux_2 ::= var_spec_aux_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("var_spec_aux_2",82, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // var_spec_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("var_spec_aux_2",82, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // var_spec_aux_1 ::= EQUAL expression_list 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("var_spec_aux_1",83, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // var_spec ::= identifier_list var_spec_aux_3 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("var_spec",80, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // var_decl_aux_3 ::= var_decl_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("var_decl_aux_3",77, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // var_decl_aux_3 ::= var_spec 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("var_decl_aux_3",77, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // var_decl_aux_2 ::= LPAREN var_decl_aux_1 RPAREN 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("var_decl_aux_2",78, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // var_decl_aux_1 ::= var_decl_aux_1 var_spec 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("var_decl_aux_1",79, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // var_decl_aux_1 ::= var_spec 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("var_decl_aux_1",79, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // var_decl_aux_1 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("var_decl_aux_1",79, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // var_decl ::= VAR var_decl_aux_3 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("var_decl",56, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // type_def ::= identifier type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_def",76, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // alias_decl ::= identifier EQUAL type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("alias_decl",75, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // type_spec ::= type_def 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_spec",73, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // type_spec ::= alias_decl 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_spec",73, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // type_decl_aux_3 ::= type_decl_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_decl_aux_3",74, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // type_decl_aux_3 ::= type_spec 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_decl_aux_3",74, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // type_decl_aux_2 ::= LPAREN type_decl_aux_1 RPAREN 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_decl_aux_2",71, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // type_decl_aux_1 ::= type_decl_aux_1 type_spec 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_decl_aux_1",72, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // type_decl_aux_1 ::= type_spec 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_decl_aux_1",72, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // type_decl_aux_1 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_decl_aux_1",72, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // type_decl ::= TYPE type_decl_aux_3 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_decl",55, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression_list_aux_2 ::= expression_list_aux_1 expression 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expression_list_aux_2",70, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression_list_aux_2 ::= expression 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expression_list_aux_2",70, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression_list_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expression_list_aux_2",70, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression_list_aux_1 ::= COMMA expression 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expression_list_aux_1",69, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression_list ::= expression expression_list_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expression_list",66, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // identifier_list_aux_2 ::= identifier_list_aux_1 identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("identifier_list_aux_2",67, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // identifier_list_aux_2 ::= identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("identifier_list_aux_2",67, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // identifier_list_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("identifier_list_aux_2",67, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // identifier_list_aux_1 ::= COMMA identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("identifier_list_aux_1",68, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // identifier_list ::= identifier identifier_list_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("identifier_list",27, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // const_spec_aux_2 ::= const_spec_aux_1 EQUAL expression_list 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("const_spec_aux_2",64, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // const_spec_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("const_spec_aux_2",64, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // const_spec_aux_1 ::= type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("const_spec_aux_1",65, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // const_spec_aux_1 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("const_spec_aux_1",65, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // const_spec ::= identifier_list const_spec_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("const_spec",63, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // const_decl_aux_3 ::= const_decl_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("const_decl_aux_3",60, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // const_decl_aux_3 ::= const_spec 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("const_decl_aux_3",60, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // const_decl_aux_2 ::= LPAREN const_decl_aux_1 RPAREN 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("const_decl_aux_2",61, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // const_decl_aux_1 ::= const_spec const_decl_aux_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("const_decl_aux_1",62, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // const_decl_aux_1 ::= const_spec 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("const_decl_aux_1",62, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // const_decl_aux_1 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("const_decl_aux_1",62, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // const_decl ::= CONST const_decl_aux_3 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("const_decl",54, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // top_level_decl ::= method_decl 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("top_level_decl",57, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // top_level_decl ::= function_decl 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("top_level_decl",57, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // top_level_decl ::= declaration 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("top_level_decl",57, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaration ::= var_decl 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("declaration",53, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaration ::= type_decl 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("declaration",53, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaration ::= const_decl 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("declaration",53, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement_list_aux ::= statement statement_list_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement_list_aux",51, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement_list_aux ::= statement 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement_list_aux",51, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statement_list_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement_list_aux",51, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement_list ::= statement_list_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statement_list",50, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // block ::= LBRACE statement_list RBRACE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("block",49, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // key_type ::= type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("key_type",47, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // map_type ::= MAP LBRACK key_type RBRACK element_type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("map_type",19, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // interface_type_name ::= type_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("interface_type_name",48, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // method_name ::= identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("method_name",46, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // method_spec ::= interface_type_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("method_spec",45, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // method_spec ::= method_name signature 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("method_spec",45, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // interface_type_aux ::= method_spec interface_type_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("interface_type_aux",44, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // interface_type_aux ::= method_spec 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("interface_type_aux",44, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // interface_type_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("interface_type_aux",44, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // interface_type ::= INTERFACE LBRACE interface_type_aux RBRACE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("interface_type",17, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-3)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parameter_decl_aux_2 ::= SUSPOINTS 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameter_decl_aux_2",43, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parameter_decl_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameter_decl_aux_2",43, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parameter_decl_aux_1 ::= identifier_list 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameter_decl_aux_1",42, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parameter_decl_aux_1 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameter_decl_aux_1",42, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parameter_decl ::= parameter_decl_aux_1 parameter_decl_aux_2 type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameter_decl",39, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parameter_list_aux_2 ::= parameter_list_aux_1 parameter_list_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameter_list_aux_2",40, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parameter_list_aux_2 ::= parameter_list_aux_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameter_list_aux_2",40, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parameter_list_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameter_list_aux_2",40, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parameter_list_aux_1 ::= COMMA parameter_decl 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameter_list_aux_1",41, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parameter_list ::= parameter_decl parameter_list_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameter_list",38, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parameters_aux_2 ::= parameter_list parameters_aux_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameters_aux_2",36, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parameters_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameters_aux_2",36, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parameters_aux_1 ::= COMMA 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameters_aux_1",37, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parameters_aux_1 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameters_aux_1",37, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parameters ::= LPAREN parameters_aux_2 RPAREN 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameters",33, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // result ::= type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("result",35, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // result ::= parameters 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("result",35, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // signature_aux ::= result 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("signature_aux",34, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // signature_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("signature_aux",34, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // signature ::= parameters signature_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("signature",32, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function_type ::= FUNC signature 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("function_type",16, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // base_type ::= type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("base_type",31, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // pointer_type ::= MULT base_type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("pointer_type",15, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tag ::= string_lit 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("tag",29, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // embedded_field_aux ::= MULT 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("embedded_field_aux",30, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // embedded_field_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("embedded_field_aux",30, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // embedded_field ::= embedded_field_aux type_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("embedded_field",28, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // field_decl_aux_3 ::= tag 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("field_decl_aux_3",26, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // field_decl_aux_3 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("field_decl_aux_3",26, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // field_decl_aux_2 ::= embedded_field 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("field_decl_aux_2",25, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // field_decl_aux_2 ::= identifier_list type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("field_decl_aux_2",25, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // field_decl_aux_1 ::= field_decl_aux_1 field_decl 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("field_decl_aux_1",23, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // field_decl_aux_1 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("field_decl_aux_1",23, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // field_decl ::= field_decl_aux_2 field_decl_aux_3 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("field_decl",24, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // struct_type ::= STRUCT LBRACE field_decl_aux_1 RBRACE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("struct_type",14, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-3)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // slice_type ::= LBRACK RBRACK element_type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("slice_type",18, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // element_type ::= type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("element_type",21, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // array_length ::= expression 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("array_length",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // array_type ::= LBRACK array_length RBRACK element_type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("array_type",13, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-3)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type_lit ::= map_type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_lit",11, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_lit ::= slice_type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_lit",11, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_lit ::= interface_type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_lit",11, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_lit ::= function_type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_lit",11, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_lit ::= pointer_type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_lit",11, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_lit ::= struct_type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_lit",11, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_lit ::= array_type 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_lit",11, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type_name ::= qualified_ident 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_name",10, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_name ::= ID 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_name",10, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= LPAREN type RPAREN 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= type_lit 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= type_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // string_lit ::= ALL_STRINGS_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("string_lit",8, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // imaginary_lit ::= float_lit IMAGINARY_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("imaginary_lit",7, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // float_lit ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("float_lit",6, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // float_lit ::= decimal_lit 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("float_lit",6, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // hex_lit ::= HEXAL_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("hex_lit",5, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // octal_lit ::= OCTAL_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("octal_lit",4, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decimal_lit ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("decimal_lit",3, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // int_lit ::= hex_lit 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("int_lit",2, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // int_lit ::= octal_lit 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("int_lit",2, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // int_lit ::= decimal_lit 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("int_lit",2, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // identifier ::= ID 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("identifier",1, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // compilation_unit ::= package_clause_aux import_clause_e_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("compilation_unit",0, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= compilation_unit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)).value;
		RESULT = start_val;
              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GoParser$parser.done_parsing();
          return CUP$GoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

