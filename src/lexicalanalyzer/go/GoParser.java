
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 30 04:19:28 BRT 2018
//----------------------------------------------------

package lexicalanalyzer.go;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 30 04:19:28 BRT 2018
  */
public class GoParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public GoParser() {super();}

  /** Constructor which sets the default scanner. */
  public GoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\005\000\002\004" +
    "\003\000\002\003\002\000\002\003\003\000\002\006\004" +
    "\000\002\005\003\000\002\005\005\000\002\011\002\000" +
    "\002\011\003\000\002\010\003\000\002\010\004\000\002" +
    "\007\004\000\002\007\007\000\002\013\004\000\002\014" +
    "\005\000\002\014\007\000\002\016\002\000\002\016\004" +
    "\000\002\012\002\000\002\012\003\000\002\015\003\000" +
    "\002\015\003\000\002\022\002\000\002\022\003\000\002" +
    "\021\003\000\002\021\004\000\002\020\003\000\002\024" +
    "\003\000\002\024\003\000\002\026\002\000\002\026\003" +
    "\000\002\027\002\000\002\025\005\000\002\031\002\000" +
    "\002\031\003\000\002\030\003\000\002\032\004\000\002" +
    "\036\002\000\002\036\003\000\002\017\005\000\002\023" +
    "\003\000\002\033\003\000\002\033\004\000\002\034\002" +
    "\000\002\034\004\000\002\035\002\000\002\035\003\000" +
    "\002\037\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\012\002\ufffe\016\ufffe\022\ufffe\025\006\001" +
    "\002\000\010\002\ufff9\016\ufff9\022\016\001\002\000\010" +
    "\002\ufffd\016\ufffd\022\ufffd\001\002\000\004\134\011\001" +
    "\002\000\004\002\010\001\002\000\004\002\001\001\002" +
    "\000\024\002\uffff\016\uffff\022\uffff\062\uffff\063\uffff\071" +
    "\uffff\072\uffff\165\uffff\166\uffff\001\002\000\012\002\ufffb" +
    "\016\ufffb\022\ufffb\072\ufffb\001\002\000\012\002\ufffc\016" +
    "\ufffc\022\ufffc\072\014\001\002\000\004\134\011\001\002" +
    "\000\012\002\ufffa\016\ufffa\022\ufffa\072\ufffa\001\002\000" +
    "\012\062\060\072\061\164\056\165\uffee\001\002\000\006" +
    "\002\uffea\016\023\001\002\000\010\002\ufff7\016\ufff7\022" +
    "\016\001\002\000\006\002\ufff8\016\ufff8\001\002\000\006" +
    "\002\ufff6\016\ufff6\001\002\000\004\134\011\001\002\000" +
    "\006\002\uffe8\016\uffe8\001\002\000\006\002\uffe6\016\uffe6" +
    "\001\002\000\006\002\uffe9\016\023\001\002\000\004\002" +
    "\000\001\002\000\006\002\uffe7\016\uffe7\001\002\000\010" +
    "\002\uffd8\016\uffd8\062\uffd8\001\002\000\010\002\uffe3\016" +
    "\uffe3\062\037\001\002\000\006\002\uffe2\016\uffe2\001\002" +
    "\000\006\002\uffe4\016\uffe4\001\002\000\006\002\uffd9\016" +
    "\uffd9\001\002\000\006\002\uffe5\016\uffe5\001\002\000\010" +
    "\063\uffdf\134\011\166\uffd3\001\002\000\004\063\uffdd\001" +
    "\002\000\010\063\uffd7\071\051\166\uffd7\001\002\000\006" +
    "\063\uffdb\166\047\001\002\000\006\063\uffd2\166\uffd2\001" +
    "\002\000\004\063\uffde\001\002\000\004\063\046\001\002" +
    "\000\006\002\uffe0\016\uffe0\001\002\000\004\063\uffda\001" +
    "\002\000\004\063\uffdc\001\002\000\004\134\011\001\002" +
    "\000\006\063\uffd6\166\uffd6\001\002\000\006\063\uffd4\166" +
    "\uffd4\001\002\000\004\165\uffed\001\002\000\010\002\ufff5" +
    "\016\ufff5\022\ufff5\001\002\000\004\165\uffeb\001\002\000" +
    "\004\165\067\001\002\000\010\072\061\164\056\165\uffee" +
    "\001\002\000\004\165\uffec\001\002\000\012\063\ufff0\072" +
    "\061\164\056\165\uffee\001\002\000\012\063\ufff0\072\061" +
    "\164\056\165\uffee\001\002\000\004\063\065\001\002\000" +
    "\010\002\ufff4\016\ufff4\022\ufff4\001\002\000\004\063\uffef" +
    "\001\002\000\012\072\061\134\011\164\056\165\uffee\001" +
    "\002\000\020\002\ufff3\016\ufff3\022\ufff3\063\ufff3\072\ufff3" +
    "\164\ufff3\165\ufff3\001\002\000\004\072\074\001\002\000" +
    "\004\165\073\001\002\000\020\002\ufff2\016\ufff2\022\ufff2" +
    "\063\ufff2\072\ufff2\164\ufff2\165\ufff2\001\002\000\004\134" +
    "\011\001\002\000\004\165\076\001\002\000\020\002\ufff1" +
    "\016\ufff1\022\ufff1\063\ufff1\072\ufff1\164\ufff1\165\ufff1\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\010\002\006\003\003\006\004\001\001\000" +
    "\010\007\017\010\020\011\016\001\001\000\002\001\001" +
    "\000\006\004\011\005\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\014\001\001\000\002\001\001\000" +
    "\010\012\056\013\054\015\053\001\001\000\012\017\024" +
    "\020\023\021\025\022\026\001\001\000\006\007\017\010" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\030\023\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\024\020\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\024\034\025" +
    "\035\026\033\027\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\040\030\043\031\044\032\037\033\042\035\041\001\001" +
    "\000\002\001\001\000\004\034\051\001\001\000\004\036" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\040\033\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\067\001\001\000\010\012\056" +
    "\013\061\015\053\001\001\000\002\001\001\000\012\012" +
    "\056\013\062\015\053\016\063\001\001\000\012\012\056" +
    "\013\062\015\053\016\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\071\012\056" +
    "\013\070\015\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\074" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GoParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left  == 0) {
                m.append(" in line "+(s.left - 1));
                if (s.right  == 0)
                    m.append(", column "+(s.right - 1));
            }
        }

        m.append(" : "+message);

        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$GoParser$actions {
  private final GoParser parser;

  /** Constructor */
  CUP$GoParser$actions(GoParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$GoParser$do_action(
    int                        CUP$GoParser$act_num,
    java_cup.runtime.lr_parser CUP$GoParser$parser,
    java.util.Stack            CUP$GoParser$stack,
    int                        CUP$GoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GoParser$result;

      /* select the action based on the action number */
      switch (CUP$GoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // qualified_identifier ::= package_name DOT identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("qualified_identifier",29, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // identifier_list_aux_2 ::= identifier_list 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("identifier_list_aux_2",27, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // identifier_list_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("identifier_list_aux_2",27, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // identifier_list_aux ::= COMMA identifier_list 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("identifier_list_aux",26, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // identifier_list_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("identifier_list_aux",26, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // identifier_list ::= identifier identifier_list_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("identifier_list",25, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // identifier_list ::= identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("identifier_list",25, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // function_name ::= identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("function_name",17, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function_decl ::= FUNC function_name signature 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("function_decl",13, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sus_points_aux ::= SUSPOINTS 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("sus_points_aux",28, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sus_points_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("sus_points_aux",28, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parameter_decl ::= identifier_list_aux_2 sus_points_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameter_decl",24, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parameters_list ::= parameter_decl 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameters_list",22, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parameters_list_aux ::= parameters_list 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameters_list_aux",23, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parameters_list_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameters_list_aux",23, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameters ::= LPAREN parameters_list_aux RPAREN 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameters",19, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // result ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("result",21, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // result_aux ::= result 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("result_aux",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // result_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("result_aux",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // signature ::= result_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("signature",18, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // signature ::= parameters 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("signature",18, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_declaration ::= function_decl 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_declaration",14, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_declaration_e ::= type_declaration_e type_declaration 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_declaration_e",15, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_declaration_e ::= type_declaration 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$GoParser$stack.peek()).value;
		RESULT = t;
              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_declaration_e",15, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type_declaration_e_aux ::= type_declaration_e 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$GoParser$stack.peek()).value;
		RESULT = t;
              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_declaration_e_aux",16, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_declaration_e_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("type_declaration_e_aux",16, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // import_clause_aux_2 ::= UNDERSCORE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause_aux_2",11, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // import_clause_aux_2 ::= DOT 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause_aux_2",11, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // import_clause_aux ::= import_clause_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause_aux",8, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // import_clause_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause_aux",8, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // import_name_aux_2 ::= import_name import_name_aux_2 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_name_aux_2",12, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // import_name_aux_2 ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_name_aux_2",12, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // import_name_aux ::= QUOTE import_name DOT identifier QUOTE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_name_aux",10, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // import_name_aux ::= QUOTE identifier QUOTE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_name_aux",10, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // import_name ::= import_clause_aux import_name_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_name",9, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // import_clause ::= IMPORT LPAREN import_name import_name_aux_2 RPAREN 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause",5, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // import_clause ::= IMPORT import_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause",5, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // import_clause_e ::= import_clause import_clause_e 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause_e",6, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // import_clause_e ::= import_clause 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause_e",6, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_clause_e_aux ::= import_clause_e 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause_e_aux",7, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_clause_e_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_clause_e_aux",7, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // package_name ::= package_name DOT identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("package_name",3, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // package_name ::= identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("package_name",3, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // package_clause ::= PACKAGE package_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("package_clause",4, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // package_clause_aux ::= package_clause 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("package_clause_aux",1, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // package_clause_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("package_clause_aux",1, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // identifier ::= ID 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("identifier",2, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // compilation_unit ::= package_clause_aux import_clause_e_aux type_declaration_e_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("compilation_unit",0, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= compilation_unit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)).value;
		RESULT = start_val;
              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GoParser$parser.done_parsing();
          return CUP$GoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

