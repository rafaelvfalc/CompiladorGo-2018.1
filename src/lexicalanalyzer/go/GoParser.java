
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 16 00:43:41 BRT 2018
//----------------------------------------------------

package lexicalanalyzer.go;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 16 00:43:41 BRT 2018
  */
public class GoParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public GoParser() {super();}

  /** Constructor which sets the default scanner. */
  public GoParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GoParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\005\000\002\002\004\000\002\006" +
    "\003\000\002\003\003\000\002\004\004\000\002\005\003" +
    "\000\002\012\002\000\002\012\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\004\000\002\017\004\000\002" +
    "\011\003\000\002\011\004\000\002\016\003\000\002\016" +
    "\004\000\002\007\004\000\002\010\003\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\013\006\000" +
    "\002\014\002\000\002\014\003\000\002\015\003\000\002" +
    "\015\004\000\002\025\002\000\002\025\003\000\002\024" +
    "\003\000\002\024\004\000\002\020\006\000\002\021\003" +
    "\000\002\027\004\000\002\031\002\000\002\031\003\000" +
    "\002\031\005\000\002\034\003\000\002\034\004\000\002" +
    "\034\005\000\002\034\006\000\002\022\005\000\002\033" +
    "\003\000\002\033\005\000\002\030\002\000\002\030\003" +
    "\000\002\030\004\000\002\030\005\000\002\032\003\000" +
    "\002\023\005\000\002\063\002\000\002\063\003\000\002" +
    "\063\003\000\002\040\003\000\002\037\003\000\002\037" +
    "\004\000\002\062\003\000\002\061\003\000\002\061\004" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\005\000\002\026\003\000\002\026\005\000\002\026" +
    "\004\000\002\041\003\000\002\036\007\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\042\005" +
    "\000\002\042\004\000\002\042\006\000\002\042\004\000" +
    "\002\042\003\000\002\042\003\000\002\045\004\000\002" +
    "\045\005\000\002\047\002\000\002\047\003\000\002\054" +
    "\002\000\002\054\003\000\002\050\002\000\002\050\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\053\003\000\002\053\005\000\002" +
    "\052\003\000\002\052\005\000\002\046\003\000\002\046" +
    "\005\000\002\043\006\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\055\003\000\002\055\003\000" +
    "\002\057\005\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\060\006\000\002\066\002" +
    "\000\002\066\003\000\002\066\004\000\002\066\003\000" +
    "\002\067\003\000\002\067\004\000\002\064\006\000\002" +
    "\065\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\004\025\006\001\002\000\010\002\ufffb\016" +
    "\ufffb\022\014\001\002\000\010\002\ufffe\016\ufffe\022\ufffe" +
    "\001\002\000\004\134\011\001\002\000\004\002\010\001" +
    "\002\000\004\002\000\001\002\000\164\002\uffff\007\uffff" +
    "\016\uffff\022\uffff\023\uffff\034\uffff\035\uffff\036\uffff\037" +
    "\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff" +
    "\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054" +
    "\uffff\055\uffff\056\uffff\057\uffff\062\uffff\063\uffff\064\uffff" +
    "\065\uffff\066\uffff\067\uffff\071\uffff\074\uffff\075\uffff\076" +
    "\uffff\100\uffff\101\uffff\102\uffff\103\uffff\112\uffff\122\uffff" +
    "\123\uffff\124\uffff\125\uffff\126\uffff\127\uffff\130\uffff\131" +
    "\uffff\132\uffff\133\uffff\134\uffff\145\uffff\146\uffff\150\uffff" +
    "\152\uffff\153\uffff\154\uffff\001\002\000\010\002\ufffd\016" +
    "\ufffd\022\ufffd\001\002\000\012\002\ufffc\016\ufffc\022\ufffc" +
    "\154\ufffc\001\002\000\014\062\041\072\033\134\011\146" +
    "\031\154\027\001\002\000\010\002\ufff3\016\ufff3\022\ufff3" +
    "\001\002\000\006\002\uffe7\016\047\001\002\000\010\002" +
    "\ufff9\016\ufff9\022\014\001\002\000\006\002\ufffa\016\ufffa" +
    "\001\002\000\010\002\ufff5\016\ufff5\022\ufff5\001\002\000" +
    "\010\002\ufff8\016\ufff8\022\014\001\002\000\010\002\ufff2" +
    "\016\ufff2\022\ufff2\001\002\000\010\002\ufff6\016\ufff6\022" +
    "\025\001\002\000\012\072\033\134\011\146\031\154\027" +
    "\001\002\000\010\002\ufff4\016\ufff4\022\ufff4\001\002\000" +
    "\010\002\ufff0\016\ufff0\022\ufff0\001\002\000\004\154\036" +
    "\001\002\000\004\154\035\001\002\000\010\002\ufff1\016" +
    "\ufff1\022\ufff1\001\002\000\004\154\034\001\002\000\010" +
    "\002\uffee\016\uffee\022\uffee\001\002\000\010\002\uffed\016" +
    "\uffed\022\uffed\001\002\000\010\002\uffef\016\uffef\022\uffef" +
    "\001\002\000\010\002\ufff7\016\ufff7\022\040\001\002\000" +
    "\004\062\041\001\002\000\006\063\uffeb\154\043\001\002" +
    "\000\004\063\046\001\002\000\006\063\uffe9\154\uffe9\001" +
    "\002\000\006\063\uffea\154\045\001\002\000\006\063\uffe8" +
    "\154\uffe8\001\002\000\010\002\uffec\016\uffec\022\uffec\001" +
    "\002\000\004\134\011\001\002\000\006\002\uffe5\016\uffe5" +
    "\001\002\000\004\002\001\001\002\000\006\002\uffe6\016" +
    "\047\001\002\000\006\002\uffe4\016\uffe4\001\002\000\004" +
    "\062\uffe2\001\002\000\004\062\060\001\002\000\004\064" +
    "\143\001\002\000\064\023\111\035\114\036\102\037\072" +
    "\040\100\041\106\042\077\043\076\044\113\045\116\046" +
    "\120\047\110\050\107\051\104\052\073\053\075\054\117" +
    "\055\115\056\070\057\103\062\127\064\uffe0\066\074\112" +
    "\105\134\011\001\002\000\010\063\uffd6\071\uffd6\134\011" +
    "\001\002\000\006\063\uffd8\071\uffd8\001\002\000\066\023" +
    "\111\035\114\036\102\037\072\040\100\041\106\042\077" +
    "\043\076\044\113\045\116\046\120\047\110\050\107\051" +
    "\104\052\073\053\075\054\117\055\115\056\070\057\103" +
    "\063\uffd5\066\074\071\uffd5\112\105\134\011\150\112\001" +
    "\002\000\154\007\uffd2\023\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\057\uffd2\062\uffd2\063\uffd2\064" +
    "\uffd2\065\uffd2\066\uffd2\067\uffd2\071\uffd2\074\uffd2\075\uffd2" +
    "\076\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2\112\uffd2\122" +
    "\uffd2\123\uffd2\124\uffd2\125\uffd2\126\uffd2\127\uffd2\130\uffd2" +
    "\131\uffd2\132\uffd2\133\uffd2\134\uffd2\145\uffd2\146\uffd2\150" +
    "\uffd2\152\uffd2\153\uffd2\001\002\000\006\063\066\071\065" +
    "\001\002\000\010\063\uffd6\071\uffd6\134\011\001\002\000" +
    "\064\023\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\062\uffd9\064\uffd9\066\uffd9\112\uffd9\134\uffd9\001" +
    "\002\000\006\063\uffd7\071\uffd7\001\002\000\042\063\uffb6" +
    "\064\uffb6\071\uffb6\074\uffb6\122\uffb6\123\uffb6\124\uffb6\125" +
    "\uffb6\126\uffb6\127\uffb6\130\uffb6\131\uffb6\132\uffb6\133\uffb6" +
    "\145\uffb6\152\uffb6\001\002\000\042\063\uffb3\064\uffb3\071" +
    "\uffb3\074\uffb3\122\uffb3\123\uffb3\124\uffb3\125\uffb3\126\uffb3" +
    "\127\uffb3\130\uffb3\131\uffb3\132\uffb3\133\uffb3\145\uffb3\152" +
    "\uffb3\001\002\000\042\063\uffc5\064\uffc5\071\uffc5\074\uffc5" +
    "\122\uffc5\123\uffc5\124\uffc5\125\uffc5\126\uffc5\127\uffc5\130" +
    "\uffc5\131\uffc5\132\uffc5\133\uffc5\145\uffc5\152\uffc5\001\002" +
    "\000\042\063\uffba\064\uffba\071\uffba\074\uffba\122\uffba\123" +
    "\uffba\124\uffba\125\uffba\126\uffba\127\uffba\130\uffba\131\uffba" +
    "\132\uffba\133\uffba\145\uffba\152\uffba\001\002\000\004\067" +
    "\125\001\002\000\042\063\uffb9\064\uffb9\071\uffb9\074\uffb9" +
    "\122\uffb9\123\uffb9\124\uffb9\125\uffb9\126\uffb9\127\uffb9\130" +
    "\uffb9\131\uffb9\132\uffb9\133\uffb9\145\uffb9\152\uffb9\001\002" +
    "\000\042\063\uffc1\064\uffc1\071\uffc1\074\uffc1\122\uffc1\123" +
    "\uffc1\124\uffc1\125\uffc1\126\uffc1\127\uffc1\130\uffc1\131\uffc1" +
    "\132\uffc1\133\uffc1\145\uffc1\152\uffc1\001\002\000\042\063" +
    "\uffc2\064\uffc2\071\uffc2\074\uffc2\122\uffc2\123\uffc2\124\uffc2" +
    "\125\uffc2\126\uffc2\127\uffc2\130\uffc2\131\uffc2\132\uffc2\133" +
    "\uffc2\145\uffc2\152\uffc2\001\002\000\042\063\uffc4\064\uffc4" +
    "\071\uffc4\074\uffc4\122\uffc4\123\uffc4\124\uffc4\125\uffc4\126" +
    "\uffc4\127\uffc4\130\uffc4\131\uffc4\132\uffc4\133\uffc4\145\uffc4" +
    "\152\uffc4\001\002\000\006\063\uffd4\071\uffd4\001\002\000" +
    "\042\063\uffc6\064\uffc6\071\uffc6\074\uffc6\122\uffc6\123\uffc6" +
    "\124\uffc6\125\uffc6\126\uffc6\127\uffc6\130\uffc6\131\uffc6\132" +
    "\uffc6\133\uffc6\145\uffc6\152\uffc6\001\002\000\042\063\uffb5" +
    "\064\uffb5\071\uffb5\074\uffb5\122\uffb5\123\uffb5\124\uffb5\125" +
    "\uffb5\126\uffb5\127\uffb5\130\uffb5\131\uffb5\132\uffb5\133\uffb5" +
    "\145\uffb5\152\uffb5\001\002\000\042\063\uffbb\064\uffbb\071" +
    "\uffbb\074\uffbb\122\uffbb\123\uffbb\124\uffbb\125\uffbb\126\uffbb" +
    "\127\uffbb\130\uffbb\131\uffbb\132\uffbb\133\uffbb\145\uffbb\152" +
    "\uffbb\001\002\000\060\023\111\035\114\036\102\037\072" +
    "\040\100\041\106\042\077\043\076\044\113\045\116\046" +
    "\120\047\110\050\107\051\104\052\073\053\075\054\117" +
    "\055\115\056\070\057\103\066\074\112\105\134\011\001" +
    "\002\000\042\063\uffc3\064\uffc3\071\uffc3\074\uffc3\122\uffc3" +
    "\123\uffc3\124\uffc3\125\uffc3\126\uffc3\127\uffc3\130\uffc3\131" +
    "\uffc3\132\uffc3\133\uffc3\145\uffc3\152\uffc3\001\002\000\042" +
    "\063\uffbc\064\uffbc\071\uffbc\074\uffbc\122\uffbc\123\uffbc\124" +
    "\uffbc\125\uffbc\126\uffbc\127\uffbc\130\uffbc\131\uffbc\132\uffbc" +
    "\133\uffbc\145\uffbc\152\uffbc\001\002\000\042\063\uffbd\064" +
    "\uffbd\071\uffbd\074\uffbd\122\uffbd\123\uffbd\124\uffbd\125\uffbd" +
    "\126\uffbd\127\uffbd\130\uffbd\131\uffbd\132\uffbd\133\uffbd\145" +
    "\uffbd\152\uffbd\001\002\000\004\064\122\001\002\000\060" +
    "\023\111\035\114\036\102\037\072\040\100\041\106\042" +
    "\077\043\076\044\113\045\116\046\120\047\110\050\107" +
    "\051\104\052\073\053\075\054\117\055\115\056\070\057" +
    "\103\066\074\112\105\134\011\001\002\000\042\063\uffc0" +
    "\064\uffc0\071\uffc0\074\uffc0\122\uffc0\123\uffc0\124\uffc0\125" +
    "\uffc0\126\uffc0\127\uffc0\130\uffc0\131\uffc0\132\uffc0\133\uffc0" +
    "\145\uffc0\152\uffc0\001\002\000\042\063\uffc7\064\uffc7\071" +
    "\uffc7\074\uffc7\122\uffc7\123\uffc7\124\uffc7\125\uffc7\126\uffc7" +
    "\127\uffc7\130\uffc7\131\uffc7\132\uffc7\133\uffc7\145\uffc7\152" +
    "\uffc7\001\002\000\042\063\uffb7\064\uffb7\071\uffb7\074\uffb7" +
    "\122\uffb7\123\uffb7\124\uffb7\125\uffb7\126\uffb7\127\uffb7\130" +
    "\uffb7\131\uffb7\132\uffb7\133\uffb7\145\uffb7\152\uffb7\001\002" +
    "\000\042\063\uffbf\064\uffbf\071\uffbf\074\uffbf\122\uffbf\123" +
    "\uffbf\124\uffbf\125\uffbf\126\uffbf\127\uffbf\130\uffbf\131\uffbf" +
    "\132\uffbf\133\uffbf\145\uffbf\152\uffbf\001\002\000\042\063" +
    "\uffb8\064\uffb8\071\uffb8\074\uffb8\122\uffb8\123\uffb8\124\uffb8" +
    "\125\uffb8\126\uffb8\127\uffb8\130\uffb8\131\uffb8\132\uffb8\133" +
    "\uffb8\145\uffb8\152\uffb8\001\002\000\042\063\uffbe\064\uffbe" +
    "\071\uffbe\074\uffbe\122\uffbe\123\uffbe\124\uffbe\125\uffbe\126" +
    "\uffbe\127\uffbe\130\uffbe\131\uffbe\132\uffbe\133\uffbe\145\uffbe" +
    "\152\uffbe\001\002\000\006\063\uffd3\071\uffd3\001\002\000" +
    "\004\065\123\001\002\000\042\063\uffb4\064\uffb4\071\uffb4" +
    "\074\uffb4\122\uffb4\123\uffb4\124\uffb4\125\uffb4\126\uffb4\127" +
    "\uffb4\130\uffb4\131\uffb4\132\uffb4\133\uffb4\145\uffb4\152\uffb4" +
    "\001\002\000\042\063\uffb1\064\uffb1\071\uffb1\074\uffb1\122" +
    "\uffb1\123\uffb1\124\uffb1\125\uffb1\126\uffb1\127\uffb1\130\uffb1" +
    "\131\uffb1\132\uffb1\133\uffb1\145\uffb1\152\uffb1\001\002\000" +
    "\060\023\111\035\114\036\102\037\072\040\100\041\106" +
    "\042\077\043\076\044\113\045\116\046\120\047\110\050" +
    "\107\051\104\052\073\053\075\054\117\055\115\056\070" +
    "\057\103\066\074\112\105\134\011\001\002\000\042\063" +
    "\uffb2\064\uffb2\071\uffb2\074\uffb2\122\uffb2\123\uffb2\124\uffb2" +
    "\125\uffb2\126\uffb2\127\uffb2\130\uffb2\131\uffb2\132\uffb2\133" +
    "\uffb2\145\uffb2\152\uffb2\001\002\000\060\023\111\035\114" +
    "\036\102\037\072\040\100\041\106\042\077\043\076\044" +
    "\113\045\116\046\120\047\110\050\107\051\104\052\073" +
    "\053\075\054\117\055\115\056\070\057\103\066\074\112" +
    "\105\134\011\001\002\000\004\064\uffe1\001\002\000\004" +
    "\064\uffdf\001\002\000\064\023\111\035\114\036\102\037" +
    "\072\040\100\041\106\042\077\043\076\044\113\045\116" +
    "\046\120\047\110\050\107\051\104\052\073\053\075\054" +
    "\117\055\115\056\070\057\103\063\uffb3\066\074\071\uffb3" +
    "\112\105\134\011\001\002\000\006\063\136\071\135\001" +
    "\002\000\006\063\uffdd\071\uffdd\001\002\000\060\023\111" +
    "\035\114\036\102\037\072\040\100\041\106\042\077\043" +
    "\076\044\113\045\116\046\120\047\110\050\107\051\104" +
    "\052\073\053\075\054\117\055\115\056\070\057\103\066" +
    "\074\112\105\134\011\001\002\000\004\064\uffde\001\002" +
    "\000\064\023\111\035\114\036\102\037\072\040\100\041" +
    "\106\042\077\043\076\044\113\045\116\046\120\047\110" +
    "\050\107\051\104\052\073\053\075\054\117\055\115\056" +
    "\070\057\103\063\uffb3\066\074\071\uffb3\112\105\134\011" +
    "\001\002\000\006\063\uffdb\071\uffdb\001\002\000\006\063" +
    "\uffda\071\uffda\001\002\000\006\063\uffdc\071\uffdc\001\002" +
    "\000\024\007\uff99\021\152\034\151\062\uff99\065\uffd0\112" +
    "\uff99\134\uff99\146\uff99\153\uff99\001\002\000\006\002\uffe3" +
    "\016\uffe3\001\002\000\022\007\uffb0\034\uffb0\062\uffb0\065" +
    "\uffb0\112\uffb0\134\uffb0\146\uffb0\153\uffb0\001\002\000\016" +
    "\007\214\062\uff97\112\uff97\134\uff97\146\uff97\153\uff97\001" +
    "\002\000\004\065\uffcf\001\002\000\022\007\uffcc\034\uffcc" +
    "\062\uffcc\065\uffcc\112\uffcc\134\uffcc\146\uffcc\153\uffcc\001" +
    "\002\000\016\007\uff98\062\uff98\112\uff98\134\uff98\146\uff98" +
    "\153\uff98\001\002\000\006\134\011\140\164\001\002\000" +
    "\004\065\162\001\002\000\022\007\uff99\034\151\062\uff99" +
    "\065\uffcd\112\uff99\134\uff99\146\uff99\153\uff99\001\002\000" +
    "\004\065\uffce\001\002\000\006\021\uffc9\065\uffc9\001\002" +
    "\000\006\021\152\065\uffca\001\002\000\006\021\uffc8\065" +
    "\uffc8\001\002\000\022\007\uffcb\034\uffcb\062\uffcb\065\uffcb" +
    "\112\uffcb\134\uffcb\146\uffcb\153\uffcb\001\002\000\014\002" +
    "\uffd1\013\uffd1\016\uffd1\021\uffd1\065\uffd1\001\002\000\022" +
    "\064\uff85\074\uff85\075\uff85\076\uff85\100\uff85\101\uff85\102" +
    "\uff85\103\uff85\001\002\000\022\064\uff84\074\uff84\075\uff84" +
    "\076\uff84\100\uff84\101\uff84\102\uff84\103\uff84\001\002\000" +
    "\004\064\143\001\002\000\020\074\171\075\170\076\174" +
    "\100\176\101\175\102\167\103\172\001\002\000\006\134" +
    "\uff7d\140\uff7d\001\002\000\006\134\uff7e\140\uff7e\001\002" +
    "\000\006\134\uff82\140\uff82\001\002\000\006\134\uff81\140" +
    "\uff81\001\002\000\006\134\011\140\164\001\002\000\006" +
    "\134\uff80\140\uff80\001\002\000\006\134\uff7f\140\uff7f\001" +
    "\002\000\006\134\uff7c\140\uff7c\001\002\000\004\064\uff83" +
    "\001\002\000\010\013\203\021\uff7a\065\uff7a\001\002\000" +
    "\006\021\uff77\065\uff77\001\002\000\010\013\203\021\uff79" +
    "\065\uff79\001\002\000\006\021\206\064\143\001\002\000" +
    "\010\013\uff76\021\uff76\065\uff76\001\002\000\006\021\uff7b" +
    "\065\uff7b\001\002\000\006\134\011\140\164\001\002\000" +
    "\006\021\uff73\065\uff73\001\002\000\004\064\143\001\002" +
    "\000\010\013\uff74\021\uff74\065\uff74\001\002\000\006\021" +
    "\uff78\065\uff78\001\002\000\010\013\uff75\021\uff75\065\uff75" +
    "\001\002\000\014\062\uff96\112\uff96\134\uff96\146\uff96\153" +
    "\uff96\001\002\000\014\062\223\112\220\134\011\146\225" +
    "\153\217\001\002\000\114\023\111\035\114\036\102\037" +
    "\072\040\100\041\106\042\077\043\076\044\113\045\116" +
    "\046\120\047\110\050\107\051\104\052\073\053\075\054" +
    "\117\055\115\056\070\057\103\066\304\071\uff95\074\uff95" +
    "\112\105\122\uff95\123\uff95\124\uff95\125\uff95\126\uff95\127" +
    "\uff95\130\uff95\131\uff95\132\uff95\133\uff95\134\011\145\uff95" +
    "\152\uff95\001\002\000\112\023\111\035\114\036\102\037" +
    "\072\040\100\041\106\042\077\043\076\044\113\045\116" +
    "\046\120\047\110\050\107\051\104\052\073\053\075\054" +
    "\117\055\115\056\070\057\103\066\074\074\uff95\112\105" +
    "\122\uff95\123\uff95\124\uff95\125\uff95\126\uff95\127\uff95\130" +
    "\uff95\131\uff95\132\uff95\133\uff95\134\011\145\uff95\152\uff95" +
    "\001\002\000\004\134\011\001\002\000\130\007\uff8b\023" +
    "\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b" +
    "\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050" +
    "\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b" +
    "\057\uff8b\062\uff8b\065\uff8b\066\uff8b\071\uff8b\074\uff8b\112" +
    "\uff8b\122\uff8b\123\uff8b\124\uff8b\125\uff8b\126\uff8b\127\uff8b" +
    "\130\uff8b\131\uff8b\132\uff8b\133\uff8b\134\uff8b\145\uff8b\146" +
    "\uff8b\152\uff8b\153\uff8b\001\002\000\034\074\260\122\254" +
    "\123\261\124\252\125\251\126\253\127\262\130\247\131" +
    "\264\132\257\133\255\145\250\152\263\001\002\000\004" +
    "\134\011\001\002\000\036\071\242\074\uff9d\122\uff9d\123" +
    "\uff9d\124\uff9d\125\uff9d\126\uff9d\127\uff9d\130\uff9d\131\uff9d" +
    "\132\uff9d\133\uff9d\145\uff9d\152\uff9d\001\002\000\034\074" +
    "\uff9c\122\uff9c\123\uff9c\124\uff9c\125\uff9c\126\uff9c\127\uff9c" +
    "\130\uff9c\131\uff9c\132\uff9c\133\uff9c\145\uff9c\152\uff9c\001" +
    "\002\000\114\023\111\035\114\036\102\037\072\040\100" +
    "\041\106\042\077\043\076\044\113\045\116\046\120\047" +
    "\110\050\107\051\104\052\073\053\075\054\117\055\115" +
    "\056\070\057\103\066\074\071\231\074\uff95\112\105\122" +
    "\uff95\123\uff95\124\uff95\125\uff95\126\uff95\127\uff95\130\uff95" +
    "\131\uff95\132\uff95\133\uff95\134\011\145\uff95\152\uff95\001" +
    "\002\000\034\074\uffa0\122\uffa0\123\uffa0\124\uffa0\125\uffa0" +
    "\126\uffa0\127\uffa0\130\uffa0\131\uffa0\132\uffa0\133\uffa0\145" +
    "\uffa0\152\uffa0\001\002\000\036\071\uff94\074\uff94\122\uff94" +
    "\123\uff94\124\uff94\125\uff94\126\uff94\127\uff94\130\uff94\131" +
    "\uff94\132\uff94\133\uff94\145\uff94\152\uff94\001\002\000\004" +
    "\134\011\001\002\000\004\066\234\001\002\000\130\007" +
    "\uff8a\023\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a" +
    "\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047" +
    "\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\056\uff8a\057\uff8a\062\uff8a\065\uff8a\066\uff8a\071\uff8a\074" +
    "\uff8a\112\uff8a\122\uff8a\123\uff8a\124\uff8a\125\uff8a\126\uff8a" +
    "\127\uff8a\130\uff8a\131\uff8a\132\uff8a\133\uff8a\134\uff8a\145" +
    "\uff8a\146\uff8a\152\uff8a\153\uff8a\001\002\000\010\134\011" +
    "\140\236\153\240\001\002\000\004\067\uff87\001\002\000" +
    "\004\067\uff88\001\002\000\004\067\241\001\002\000\004" +
    "\067\uff86\001\002\000\130\007\uff89\023\uff89\034\uff89\035" +
    "\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89" +
    "\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052" +
    "\uff89\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89\062\uff89" +
    "\065\uff89\066\uff89\071\uff89\074\uff89\112\uff89\122\uff89\123" +
    "\uff89\124\uff89\125\uff89\126\uff89\127\uff89\130\uff89\131\uff89" +
    "\132\uff89\133\uff89\134\uff89\145\uff89\146\uff89\152\uff89\153" +
    "\uff89\001\002\000\004\134\011\001\002\000\036\071\uff9a" +
    "\074\uff9a\122\uff9a\123\uff9a\124\uff9a\125\uff9a\126\uff9a\127" +
    "\uff9a\130\uff9a\131\uff9a\132\uff9a\133\uff9a\145\uff9a\152\uff9a" +
    "\001\002\000\004\063\245\001\002\000\112\023\111\035" +
    "\114\036\102\037\072\040\100\041\106\042\077\043\076" +
    "\044\113\045\116\046\120\047\110\050\107\051\104\052" +
    "\073\053\075\054\117\055\115\056\070\057\103\066\074" +
    "\074\uff95\112\105\122\uff95\123\uff95\124\uff95\125\uff95\126" +
    "\uff95\127\uff95\130\uff95\131\uff95\132\uff95\133\uff95\134\011" +
    "\145\uff95\152\uff95\001\002\000\034\074\uff9f\122\uff9f\123" +
    "\uff9f\124\uff9f\125\uff9f\126\uff9f\127\uff9f\130\uff9f\131\uff9f" +
    "\132\uff9f\133\uff9f\145\uff9f\152\uff9f\001\002\000\010\134" +
    "\uffa7\140\uffa7\154\uffa7\001\002\000\010\134\uffa2\140\uffa2" +
    "\154\uffa2\001\002\000\010\134\uffaa\140\uffaa\154\uffaa\001" +
    "\002\000\010\134\uffab\140\uffab\154\uffab\001\002\000\010" +
    "\134\uffa9\140\uffa9\154\uffa9\001\002\000\010\134\uffad\140" +
    "\uffad\154\uffad\001\002\000\010\134\uffa4\140\uffa4\154\uffa4" +
    "\001\002\000\010\134\011\140\273\154\271\001\002\000" +
    "\010\134\uffa5\140\uffa5\154\uffa5\001\002\000\010\134\uffae" +
    "\140\uffae\154\uffae\001\002\000\010\134\uffac\140\uffac\154" +
    "\uffac\001\002\000\010\134\uffa8\140\uffa8\154\uffa8\001\002" +
    "\000\010\134\uffa3\140\uffa3\154\uffa3\001\002\000\010\134" +
    "\uffa6\140\uffa6\154\uffa6\001\002\000\026\007\uff8d\034\uff8d" +
    "\062\uff8d\065\uff8d\066\234\071\uff8d\112\uff8d\134\uff8d\146" +
    "\uff8d\153\uff8d\001\002\000\024\007\uff92\034\uff92\062\uff92" +
    "\065\uff92\071\276\112\uff92\134\uff92\146\uff92\153\uff92\001" +
    "\002\000\024\007\uff93\034\uff93\062\uff93\065\uff93\071\274" +
    "\112\uff93\134\uff93\146\uff93\153\uff93\001\002\000\022\007" +
    "\uffaf\034\uffaf\062\uffaf\065\uffaf\112\uffaf\134\uffaf\146\uffaf" +
    "\153\uffaf\001\002\000\022\007\uff91\034\uff91\062\uff91\065" +
    "\uff91\112\uff91\134\uff91\146\uff91\153\uff91\001\002\000\024" +
    "\007\uff90\034\uff90\062\uff90\065\uff90\071\231\112\uff90\134" +
    "\uff90\146\uff90\153\uff90\001\002\000\024\007\uff8f\034\uff8f" +
    "\062\uff8f\065\uff8f\071\uff8f\112\uff8f\134\uff8f\146\uff8f\153" +
    "\uff8f\001\002\000\004\140\275\001\002\000\024\007\uff8e" +
    "\034\uff8e\062\uff8e\065\uff8e\071\uff8e\112\uff8e\134\uff8e\146" +
    "\uff8e\153\uff8e\001\002\000\004\134\011\001\002\000\024" +
    "\007\uff8c\034\uff8c\062\uff8c\065\uff8c\071\uff8c\112\uff8c\134" +
    "\uff8c\146\uff8c\153\uff8c\001\002\000\112\023\111\035\114" +
    "\036\102\037\072\040\100\041\106\042\077\043\076\044" +
    "\113\045\116\046\120\047\110\050\107\051\104\052\073" +
    "\053\075\054\117\055\115\056\070\057\103\066\074\074" +
    "\uff95\112\105\122\uff95\123\uff95\124\uff95\125\uff95\126\uff95" +
    "\127\uff95\130\uff95\131\uff95\132\uff95\133\uff95\134\011\145" +
    "\uff95\152\uff95\001\002\000\034\074\uffa1\122\uffa1\123\uffa1" +
    "\124\uffa1\125\uffa1\126\uffa1\127\uffa1\130\uffa1\131\uffa1\132" +
    "\uffa1\133\uffa1\145\uffa1\152\uffa1\001\002\000\034\074\uff9e" +
    "\122\uff9e\123\uff9e\124\uff9e\125\uff9e\126\uff9e\127\uff9e\130" +
    "\uff9e\131\uff9e\132\uff9e\133\uff9e\145\uff9e\152\uff9e\001\002" +
    "\000\036\071\uff9b\074\uff9b\122\uff9b\123\uff9b\124\uff9b\125" +
    "\uff9b\126\uff9b\127\uff9b\130\uff9b\131\uff9b\132\uff9b\133\uff9b" +
    "\145\uff9b\152\uff9b\001\002\000\012\067\125\134\011\140" +
    "\236\153\240\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\010\002\006\003\003\004\004\001\001\000" +
    "\016\007\020\011\016\012\015\013\014\016\021\017\017" +
    "\001\001\000\002\001\001\000\006\005\011\006\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\027\006" +
    "\012\010\031\001\001\000\002\001\001\000\010\020\047" +
    "\024\051\025\050\001\001\000\010\007\025\013\014\016" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\020\011\023\013\022\001\001\000\002\001\001\000" +
    "\004\007\025\001\001\000\010\005\027\006\012\010\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\022\001\001\000\002\001\001\000\006\014\041" +
    "\015\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\053\021\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\056\027\055\001\001\000\004\023" +
    "\143\001\001\000\010\006\070\026\130\031\127\001\001" +
    "\000\012\006\062\030\060\032\061\033\063\001\001\000" +
    "\002\001\001\000\006\006\070\026\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\062\030\066\032" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\070\026\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\070" +
    "\026\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\070\026\125\001\001" +
    "\000\002\001\001\000\010\006\131\026\133\034\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\070" +
    "\026\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\136\026\137\001\001\000\002\001\001\000\006" +
    "\006\070\026\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\036\144\037\153\040\146" +
    "\041\147\047\145\060\155\061\156\062\154\063\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\062\032\162\055\165\057\164\001\001" +
    "\000\002\001\001\000\010\036\144\041\160\047\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\177" +
    "\001\001\000\004\056\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\062\032\162\055\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\064\203\065\200\066\204\067\201\001\001\000\002\001" +
    "\001\000\006\064\212\065\211\001\001\000\004\023\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\062\032\162\055\165\057\207\001\001\000\002\001\001" +
    "\000\004\023\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\062" +
    "\032\215\042\221\043\220\045\223\046\225\001\001\000" +
    "\010\006\070\026\227\050\302\001\001\000\010\006\070" +
    "\026\227\050\301\001\001\000\006\006\062\032\277\001" +
    "\001\000\002\001\001\000\004\035\255\001\001\000\006" +
    "\006\062\032\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\070\026\227\050\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\062\032\231\043" +
    "\232\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\062\032\234\044\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\062\032\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\070\026\227\050\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\062\032" +
    "\264\043\220\046\271\051\267\052\265\053\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\062\032" +
    "\276\001\001\000\002\001\001\000\010\006\070\026\227" +
    "\050\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\062\032\234\044\236\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GoParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GoParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GoParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			
            if (s.left  == 0) {
                m.append(" in line "+(s.left));
                if (s.right  == 0)
                    m.append(", column "+(s.right));
            }
        }

        m.append(" : "+message);

        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$GoParser$actions {
  private final GoParser parser;

  /** Constructor */
  CUP$GoParser$actions(GoParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$GoParser$do_action(
    int                        CUP$GoParser$act_num,
    java_cup.runtime.lr_parser CUP$GoParser$parser,
    java.util.Stack            CUP$GoParser$stack,
    int                        CUP$GoParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GoParser$result;

      /* select the action based on the action number */
      switch (CUP$GoParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // optional_else ::= ELSE block 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("optional_else",51, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // optional_else_if ::= ELSE IF boolean_expression block 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("optional_else_if",50, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-3)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // optional_else_if_aux ::= optional_else_if_aux optional_else_if 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("optional_else_if_aux",53, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // optional_else_if_aux ::= optional_else_if 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("optional_else_if_aux",53, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // optional_section ::= optional_else 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("optional_section",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // optional_section ::= optional_else_if_aux optional_else 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("optional_section",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // optional_section ::= optional_else_if_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("optional_section",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // optional_section ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("optional_section",52, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // if_statement ::= IF boolean_expression block optional_section 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("if_statement",46, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-3)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // boolean_op ::= EQEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("boolean_op",44, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // boolean_op ::= GTEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("boolean_op",44, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // boolean_op ::= GREATER 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("boolean_op",44, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // boolean_op ::= LTEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("boolean_op",44, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // boolean_op ::= LESS 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("boolean_op",44, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // boolean_op ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("boolean_op",44, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // boolean_op ::= EQUAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("boolean_op",44, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // boolean_expression ::= expression boolean_op expression 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("boolean_expression",45, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expression",43, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= variable_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("expression",43, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // index ::= IMAGINARY_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("index",34, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // index ::= variable_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("index",34, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // index ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("index",34, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // array_indexed ::= variable_name LBRACK index RBRACK 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("array_indexed",33, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-3)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // seq_array_indexed ::= seq_array_indexed COMMA array_indexed 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("seq_array_indexed",36, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // seq_array_indexed ::= array_indexed 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("seq_array_indexed",36, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // seq_variables_1 ::= seq_variables_1 COMMA variable_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("seq_variables_1",40, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // seq_variables_1 ::= variable_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("seq_variables_1",40, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // seq_integers_literal ::= seq_integers_literal COMMA INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("seq_integers_literal",41, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // seq_integers_literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("seq_integers_literal",41, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // right_side_assignment ::= seq_array_indexed 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("right_side_assignment",39, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // right_side_assignment ::= ALL_STRINGS_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("right_side_assignment",39, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // right_side_assignment ::= seq_variables_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("right_side_assignment",39, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // right_side_assignment ::= seq_integers_literal 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("right_side_assignment",39, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // optional_types ::= types 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("optional_types",38, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // optional_types ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("optional_types",38, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // optional_const ::= CONST 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("optional_const",42, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // optional_const ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("optional_const",42, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // optional_var ::= VAR 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("optional_var",37, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // optional_var ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("optional_var",37, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // seq_variables ::= seq_variables COMMA variable_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("seq_variables",35, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // seq_variables ::= variable_name optional_types 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("seq_variables",35, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // left_side_assignment ::= UNDERSCORE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("left_side_assignment",32, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // left_side_assignment ::= seq_variables 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("left_side_assignment",32, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // left_side_assignment ::= IMAGINARY_LITERAL optional_types 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("left_side_assignment",32, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // left_side_assignment ::= LPAREN variable_name RPAREN optional_types 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("left_side_assignment",32, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-3)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // left_side_assignment ::= seq_array_indexed optional_types 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("left_side_assignment",32, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // left_side_assignment ::= MULT variable_name optional_types 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("left_side_assignment",32, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // assign_op ::= DECEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assign_op ::= ANDNOTEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // assign_op ::= RSHIFTEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // assign_op ::= LSHIFTEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // assign_op ::= MODEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // assign_op ::= XOREQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assign_op ::= OREQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assign_op ::= ANDEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assign_op ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assign_op ::= MULTEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assign_op ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assign_op ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assign_op ::= EQUAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assign_op",27, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignment ::= optional_var optional_const left_side_assignment assign_op right_side_assignment 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assignment",28, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-4)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assignment_aux ::= assignment 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assignment_aux",31, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // types ::= MULT types 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // types ::= LBRACK RBRACK types 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // types ::= identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // types ::= INTERFACE LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // types ::= COMPLEX128 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // types ::= COMPLEX64 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // types ::= FLOAT64 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // types ::= FLOAT32 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // types ::= RUNE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // types ::= BYTE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // types ::= UINTPTR 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // types ::= UINT64 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // types ::= UINT32 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // types ::= UINT16 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // types ::= UINT8 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // types ::= UINT 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // types ::= INT64 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // types ::= INT32 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // types ::= INT16 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // types ::= INT8 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // types ::= INT 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // types ::= STRING 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // types ::= BOOL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types",20, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // if_statement_aux ::= if_statement_aux if_statement 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("if_statement_aux",47, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // if_statement_aux ::= if_statement 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("if_statement_aux",47, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // if_statement_aux_e ::= if_statement_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("if_statement_aux_e",48, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assignment_aux_e ::= assignment_aux_e assignment_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assignment_aux_e",29, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assignment_aux_e ::= assignment_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assignment_aux_e",29, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignment_aux_e_1 ::= assignment_aux_e 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("assignment_aux_e_1",30, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statements ::= if_statement_aux_e 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statements",49, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statements ::= assignment_aux_e_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statements",49, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statements ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("statements",49, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // block ::= LBRACE statements RBRACE 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable_name ::= identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("variable_name",24, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameters_aux ::= variable_name SUSPOINTS types 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameters_aux",22, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameters_aux ::= variable_name types 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameters_aux",22, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameters_aux ::= variable_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameters_aux",22, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parameters_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameters_aux",22, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameters_aux_1 ::= parameters_aux_1 COMMA parameters_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameters_aux_1",25, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameters_aux_1 ::= parameters_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameters_aux_1",25, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameters ::= LPAREN parameters_aux_1 RPAREN 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("parameters",16, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // types_e ::= types_e COMMA identifier types 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types_e",26, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-3)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // types_e ::= types_e COMMA types 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types_e",26, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // types_e ::= identifier types 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types_e",26, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // types_e ::= types 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("types_e",26, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // result ::= LPAREN types_e RPAREN 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("result",23, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // result ::= types 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("result",23, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // result ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("result",23, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // signature ::= parameters result 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("signature",21, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function_name ::= identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("function_name",15, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function_clause ::= FUNC function_name signature block 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("function_clause",14, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-3)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_clause_e ::= function_clause_e function_clause 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("function_clause_e",18, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function_clause_e ::= function_clause 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("function_clause_e",18, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function_clause_aux ::= function_clause_e 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("function_clause_aux",19, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function_clause_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("function_clause_aux",19, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // identifier_e ::= identifier_e ALL_STRINGS_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("identifier_e",11, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // identifier_e ::= ALL_STRINGS_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("identifier_e",11, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // import_decl_1_aux ::= identifier_e 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_1_aux",10, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // import_decl_1_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_1_aux",10, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // import_decl_1 ::= IMPORT LPAREN import_decl_1_aux RPAREN 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_1",9, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-3)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // import_decl_aux ::= UNDERSCORE ALL_STRINGS_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_aux",6, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // import_decl_aux ::= DOT ALL_STRINGS_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_aux",6, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // import_decl_aux ::= package_name ALL_STRINGS_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_aux",6, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // import_decl_aux ::= ALL_STRINGS_LITERAL 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_aux",6, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // import_decl ::= IMPORT import_decl_aux 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl",5, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // import_decl_e_1 ::= import_decl_e_1 import_decl_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_e_1",12, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // import_decl_e_1 ::= import_decl_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_e_1",12, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // import_decl_e ::= import_decl_e import_decl 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_e",7, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // import_decl_e ::= import_decl 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_e",7, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // import_decl_e_aux_1 ::= import_decl_e_1 import_decl_e 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_e_aux_1",13, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // import_decl_e_aux_1 ::= import_decl_e import_decl_e_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_e_aux_1",13, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_decl_e_aux_1 ::= import_decl_e_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_e_aux_1",13, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_decl_e_aux_1 ::= import_decl_e 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_e_aux_1",13, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_decl_e_aux ::= import_decl_e_aux_1 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_e_aux",8, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // import_decl_e_aux ::= 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("import_decl_e_aux",8, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // package_name ::= identifier 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("package_name",3, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // package_clause ::= PACKAGE package_name 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("package_clause",2, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // package_clause_aux ::= package_clause 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("package_clause_aux",1, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // identifier ::= ID 
            {
              Object RESULT =null;

              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("identifier",4, ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= compilation_unit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)).value;
		RESULT = start_val;
              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GoParser$parser.done_parsing();
          return CUP$GoParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // compilation_unit ::= package_clause_aux import_decl_e_aux function_clause_aux 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$GoParser$stack.elementAt(CUP$GoParser$top-1)).value;
		if(p != null && i != null){
                                     System.out.println("PACKAGE RECONIZED: "+ p + "   IMPORT RECONIZED: "+i);
                                }else if(p== null &&  i != null){
                                     System.out.println("IMPORT RECONIZED: "+ i) ;
                                }else if(p != null &&  i == null){
                                     System.out.println("PACKAGE RECONIZED: "+ p );
                               };
              CUP$GoParser$result = parser.getSymbolFactory().newSymbol("compilation_unit",0, ((java_cup.runtime.Symbol)CUP$GoParser$stack.elementAt(CUP$GoParser$top-2)), ((java_cup.runtime.Symbol)CUP$GoParser$stack.peek()), RESULT);
            }
          return CUP$GoParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

