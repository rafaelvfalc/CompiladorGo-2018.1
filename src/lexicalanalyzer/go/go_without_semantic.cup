import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.*;

//import semanticanalyzer.go.*;
//import semanticanalyzer.go.objects.*;

parser code {:

    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Erro sintatico: ");

        if (info instanceof ComplexSymbol) {
            ComplexSymbol s = (ComplexSymbol) info;
            if(s.value != null) m.append( s.value.toString() );
            m.append( " - Linha: " + s.getLeft().getLine() + " - Coluna: " + s.getLeft().getColumn() );
        }

        m.append(" : " + message);

        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("Erro - " + message);
        System.exit(-1);
    }
:};


// Terminals

terminal GO, MAP, STRUCT, TRUE, FALSE, BREAK, DEFAULT, SELECT, CONST, FALLTHROUGH, CASE, DEFER;
terminal IF, RANGE, TYPE, GOTO, IMPORT, RETURN, VAR, FUNC, INTERFACE, PACKAGE, SWITCH, CONTINUE;
terminal CHAN, ELSE, FOR, MOD, NOT, MINUS, OR, NOTEQ, OROR, CHANNEL, LSHIFTEQ, EQUAL, CHANNELEQ;
terminal LESS, PLUSEQ, MULT, XOR, GREATER, GTEQ, LTEQ, ANDEQ, MINUSEQ, DIV, PLUS, LSHIFT, PLUSPLUS;
terminal RSHIFT, MINUSMINUS, ANDNOT, RSHIFTEQ, AND, ANDAND, OREQ, MULTEQ, DIVEQ, ANDNOTEQ, EQEQ;
terminal COMMA, SEMICOLON, SUSPOINTS, DOT, COLON, LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE;
terminal INTERROGATION, HASH, DOUBLE_INTERROGATION, INT_LITERAL, FLOAT_LITERAL, IMG_LITERAL, RUNE_LITERAL;
terminal STRING_LITERAL, BLANK_IDENTIFIER, IDENTIFIER, XOREQ;

// Non Terminals
non terminal struct_type, field_decl, field_decl_star1, embedded_field, embedded_field_1, embedded_field_2, type, type_lit;
non terminal type_no_identifier, type_name, aux_type_name_1, type_name_no_par, element_type, pointer_type, base_type, function_type;
non terminal interface_type, map_type, slice_type, key_type, channel_type, array_length, array_type, signature, result;
non terminal parameters, parameter_list, parameter_decl, parameter_decl_star, func_identifier_list, func_identifier_list_aux_1;
non terminal identifier_list_param, identifier_star_2, identifier_star_3, identifier_star_4, method_spec, method_spec_aux_1;
non terminal method_spec_aux_2, opt_mul, opt_comma, opt_identifier_list, opt_identifier, opt_ellipsis_comma, aux_field_decl_1;
non terminal aux_field_decl_2, aux_field_decl_3, aux_field_decl_4, identifier_star_1, aux_parameters_1, aux_parameters_2, aux_parameter_list_3;
non terminal aux_parameter_list_1, aux_parameter_list_2, aux_inteface_type_1, aux_channel_type_1, aux_result, aux_result_2, aux_result_3;
non terminal basic_lit, composite_lit, function_lit, boolean_lit, composite_lit_incomplete, literal_type_incomplete, unary_op;
non terminal mul_op, add_op, rel_op, bin_op, expression, expression_list, unary_expr, primary_expr, or_expression, and_expression;
non terminal relop_expression, mul_expression, add_expression, x, y, conversion, next_conversion, type_conv, opt_dot_identifier;
non terminal dot_identifier, type_name_dot_identifier, aux_type_name_dot_identifier, index, primary_expr_other_options, aux_type_dot_identifier;
non terminal Index_and_slice, opt_expression, opt_expression_2, possible_close, possible_close_2, possible_close_3, arguments, elementList_aux_1;
non terminal exp_type_etc, opt_exp_type, opt_comma_exp, Source_file, package_clause, import_decl, import_decl_star, import_decl_aux_1;
non terminal import_spec, import_spec_star, import_spec_aux_1, declaration, top_level_decl, top_level_decl_star, function_decl, function_body_opt;
non terminal method_decl, operand, operand_incomplete, literal, literal_type, literal_value, literal_value_aux_1, element;
non terminal keyed_element, keyed_element_aux_1, keyed_element_aux_2, keyed_element_aux_3, identifier, const_decl, const_spec, tag;
non terminal aux_const_spec, aux_const_spec_2, aux_const_decl_1, aux_comma_exp, identifier_list_star_aux, identifier_list_star_2, identifier_list;
non terminal expression_list_star, opt_type, statement, statement_lis, statement_lis_aux, simple_stmt, short_var_decl, element_list;
non terminal aux_expression,assignment, assign_op, aux_op, type_decl, type_decl_aux, type_spec_aux, type_spec, opt_simple_stmt;
non terminal opt_assign, opt_assign_exp_list, var_decl, var_decl_aux, var_spec_aux, var_spec_aux_2, var_spec, labeled_stmt, go_stmt, return_stmt;
non terminal break_stmt, continue_stmt, goto_stmt, fall_through_stmt, block, defer_stmt, select_stmt, comm_clause, comm_case, stmt_opt;
non terminal recv_stmt, recv_stmt_aux, recv_stmt_aux_2, if_stmt, if_stmt_2, simple_stmt_2, simple_stmt_aux, if_stmt_aux, if_stmt_aux_2;
non terminal simple_stmt_sc, for_stmt, for_stmt_aux, for_clause, range_clause, simples_stmt_star_aux, range_clause_aux, range_clause_aux_2;
non terminal switch_stmt, switch_stmt_aux, switch_stmt_aux_2, switch_stmt_sc, expr_case_clause, expr_switch_case, type_switch_guard, type_case_clause;
non terminal opt_type_switch_guard, type_switch_case, aux_typeList, type_list, type_star, basic_lit_star, expression_star, operand_star, function_type_star;

precedence left CHANNEL;

precedence left OROR;
precedence left AND;
precedence left EQEQ, NOTEQ, LESS, LTEQ, GREATER, GTEQ;
precedence left MULT, DIV, MOD, LSHIFT, RSHIFT, AND, ANDNOT;
precedence left PLUS, MINUS, OR, XOR;

start with Source_file;


identifier ::= IDENTIFIER
               | BLANK_IDENTIFIER;

// OPERATIONS
basic_lit_star ::= basic_lit basic_lit_star |;

basic_lit     ::= INT_LITERAL
                 | FLOAT_LITERAL
                 | IMG_LITERAL
                 | RUNE_LITERAL
                 | STRING_LITERAL;

boolean_lit ::= TRUE
            | FALSE;

unary_op  ::= PLUS
   | MINUS
   | NOT
   | XOR
   | MULT
   | AND
   | CHANNEL;
   
mul_op    ::= MULT
             | DIV
             | MOD
             | LSHIFT
             | RSHIFT
             | AND
             | ANDNOT;

add_op    ::= PLUS
             | MINUS
             | OR
             | XOR;

rel_op    ::= EQEQ
            | NOTEQ
            | LESS
            | LTEQ
            | GREATER
            | GTEQ;
bin_op    ::= OROR
             | AND
             | rel_op
             | add_op
             | mul_op;

// COMPOSITE LITERAL
composite_lit     ::= literal_type literal_value;
literal_type      ::= struct_type | array_type | LBRACK SUSPOINTS RBRACK element_type | slice_type | map_type | type_name;
literal_value     ::= LBRACE literal_value_aux_1 RBRACE;
literal_value_aux_1::= element_list |;

element_list      ::= keyed_element elementList_aux_1 opt_comma;
elementList_aux_1  ::= elementList_aux_1 COMMA keyed_element |;

keyed_element     ::= keyed_element_aux_1 keyed_element_aux_2;
keyed_element_aux_1 ::= expression | literal_value;
keyed_element_aux_2 ::= keyed_element_aux_3 |;
keyed_element_aux_3 ::= COLON element;

element          ::= expression | literal_value;


// FUNCTION LITERAL
function_lit ::= FUNC signature block;

// SOURCE AND IMPORT
Source_file ::= package_clause SEMICOLON import_decl_star top_level_decl_star;

import_decl_star ::= import_decl SEMICOLON import_decl_star |;
import_decl ::= IMPORT import_decl_aux_1;
import_decl_aux_1 ::= import_spec | LPAREN import_spec_star RPAREN;
import_spec_star ::= import_spec SEMICOLON import_spec_star |;

import_spec ::= import_spec_aux_1 STRING_LITERAL;
import_spec_aux_1 ::= DOT | IDENTIFIER |;

package_clause ::= PACKAGE IDENTIFIER;

// OPERAND
operand_star    ::= operand_star operand |;
operand        ::= literal
                   | type_name
                   | LPAREN expression RPAREN;

literal        ::= basic_lit
       | function_lit
                   | boolean_lit;
 
// EXPRESSION
unary_expr      ::= primary_expr
                   | unary_op unary_expr;
 
primary_expr    ::= operand
                   | conversion
                   | primary_expr primary_expr_other_options;

expression     ::= or_expression;

or_expression ::= or_expression OROR and_expression
     | and_expression;

and_expression ::= and_expression AND relop_expression
      | relop_expression;

relop_expression ::= relop_expression rel_op add_expression
      | add_expression;
add_expression ::= add_expression add_op mul_expression
                  | mul_expression;

mul_expression ::= mul_expression mul_op unary_expr
                  | unary_expr;


// SLICE, INDEX AND ARGUMENTS
primary_expr_other_options ::= Index_and_slice
       | arguments 
       | HASH DOT LPAREN type RPAREN;

arguments      ::= HASH LPAREN exp_type_etc RPAREN;
exp_type_etc     ::= opt_exp_type opt_ellipsis_comma |;

opt_exp_type     ::= expression_list
                   | type_lit opt_comma_exp;

opt_comma_exp    ::= COMMA expression_list |;

Index_and_slice  ::= LBRACK expression possible_close | LBRACK possible_close_2;
possible_close  ::= RBRACK | COLON opt_expression RBRACK;
possible_close_2 ::= COLON RBRACK | COLON expression possible_close_3;
possible_close_3 ::= COLON expression RBRACK | RBRACK;

opt_ellipsis_comma    ::= SUSPOINTS | SUSPOINTS COMMA | ;

opt_expression  ::= expression |;
opt_expression_2 ::= RBRACK | COLON opt_expression; 
index ::= LBRACK expression RBRACK;

expression_list ::= expression expression_star;
expression_star ::= COMMA expression expression_star
                   |;

conversion     ::= type_conv next_conversion;
next_conversion ::= LPAREN expression opt_comma RPAREN;

type_conv ::= type_name | type_lit | INTERROGATION type_conv INTERROGATION;

opt_dot_identifier ::= DOT IDENTIFIER | ;

// CONST
const_decl     ::= CONST aux_const_decl_1;
aux_const_decl_1 ::= const_spec | LPAREN aux_const_spec RPAREN;

const_spec     ::= identifier_list_star_2 aux_const_spec_2;
aux_const_spec  ::= aux_const_spec const_spec SEMICOLON  | ;

aux_comma_exp   ::= aux_comma_exp COMMA expression | ;
opt_type       ::= type  | ;

aux_const_spec_2          ::= opt_type EQUAL expression_list | ;
identifier_list_star_aux ::= identifier_list_star_aux COMMA IDENTIFIER
                          |;
identifier_list_star_2   ::= IDENTIFIER identifier_list_star_aux;


// STATEMENT
statement ::= declaration | labeled_stmt | simple_stmt | go_stmt | return_stmt | 
              break_stmt | continue_stmt | goto_stmt | fall_through_stmt | block | 
              if_stmt | select_stmt | switch_stmt | defer_stmt | for_stmt;

// DECLARATION
top_level_decl_star ::= top_level_decl SEMICOLON top_level_decl_star |;
top_level_decl ::= declaration | function_decl | method_decl;

function_decl ::= FUNC IDENTIFIER signature function_body_opt;
function_body_opt ::= block
                    |;

method_decl ::= FUNC parameters IDENTIFIER signature function_body_opt;
declaration ::= const_decl | type_decl | var_decl;

type_decl      ::= TYPE type_decl_aux;
type_decl_aux   ::= type_spec | LPAREN type_spec_aux RPAREN;
type_spec_aux   ::= type_spec_aux type_spec SEMICOLON | ;
type_spec      ::= IDENTIFIER opt_assign type ;

var_decl       ::= VAR var_decl_aux;
var_decl_aux    ::= var_spec | LPAREN var_spec_aux RPAREN;
var_spec_aux    ::= var_spec_aux var_spec SEMICOLON | ;
var_spec       ::= identifier_list_star_2 var_spec_aux_2;
var_spec_aux_2   ::= type :t opt_assign_exp_list
                  | EQUAL expression_list;

// LABELLED STATEMENT
labeled_stmt ::= IDENTIFIER COLON statement;

// SIMPLE STATEMENT
simple_stmt ::= expression aux_expression | assignment | INTERROGATION short_var_decl |;
aux_expression ::= CHANNEL expression | PLUSPLUS | MINUSMINUS | PLUS PLUS | MINUS MINUS | ;


assignment ::= expression_list assign_op expression_list;

assign_op ::= MULTEQ
    | PLUSEQ
    | XOREQ
    | DIVEQ
    | LSHIFTEQ
    | RSHIFTEQ
    | ANDNOTEQ
    | MINUSEQ
    | ANDEQ
    | EQUAL;

short_var_decl ::=  identifier_list CHANNELEQ expression_list;

statement_lis ::= statement SEMICOLON statement_lis | ;
block ::= LBRACE statement_lis RBRACE;


// FOR STATEMENT
for_stmt ::= FOR for_stmt_aux block;
for_stmt_aux ::= expression | for_clause | range_clause |;
for_clause ::= simple_stmt SEMICOLON opt_expression SEMICOLON simple_stmt;

simples_stmt_star_aux  ::= CHANNEL expression | PLUSPLUS | MINUSMINUS | aux_comma_exp assign_op expression_list;
range_clause_aux      ::= expression_list range_clause_aux_2 | ;
range_clause_aux_2     ::= EQUAL | CHANNELEQ;
range_clause         ::= range_clause_aux RANGE expression;


// SWITCH STATEMENT
switch_stmt ::= SWITCH switch_stmt_aux;

switch_stmt_aux ::= simple_stmt_sc switch_stmt_aux_2;
simple_stmt_sc ::= simple_stmt SEMICOLON | HASH;

switch_stmt_aux_2 ::= opt_expression LBRACE expr_case_clause RBRACE | type_switch_guard LBRACE type_case_clause RBRACE;
expr_case_clause ::= expr_switch_case COLON statement_lis expr_case_clause |;

// HOT FIX HASH
type_switch_guard    ::= opt_type_switch_guard primary_expr HASH DOT LPAREN TYPE RPAREN;
opt_type_switch_guard ::= identifier CHANNELEQ | HASH;

type_case_clause     ::= type_switch_case COLON statement_lis type_case_clause | ;
type_switch_case     ::= CASE type_list | DEFAULT;

expr_switch_case ::= CASE expression_list | DEFAULT ;

type_list ::= type  aux_typeList;
aux_typeList ::= COMMA type  aux_typeList | ;

// DEFER STATEMENT
defer_stmt ::= DEFER expression;

// STATEMENT
if_stmt         ::= IF simple_stmt_aux expression block if_stmt_aux;
simple_stmt_aux  ::= HASH simple_stmt SEMICOLON | ;

if_stmt_2         ::= IF simple_stmt_aux expression block if_stmt_aux;

if_stmt_aux      ::=   ELSE if_stmt_2
                   | ELSE block
       |;
       
// SELECT STATEMENT
select_stmt  ::= SELECT LBRACE comm_clause RBRACE;
comm_clause  ::= comm_case COLON statement_lis comm_clause | ;
comm_case    ::= CASE stmt_opt | DEFAULT;
stmt_opt     ::= expression CHANNEL expression | recv_stmt;
recv_stmt    ::= recv_stmt_aux expression;
recv_stmt_aux ::= expression_list recv_stmt_aux_2; 
recv_stmt_aux_2 ::= EQUAL | CHANNELEQ;

//OTHER STATEMENTS
opt_identifier ::= identifier |;
fall_through_stmt ::= FALLTHROUGH;
goto_stmt ::= GOTO opt_identifier;
continue_stmt ::= CONTINUE opt_identifier;
break_stmt ::= BREAK opt_identifier;

expression_list_star ::= expression_list
        |;


// RETURN STATEMENT
return_stmt ::= RETURN expression_list_star;

go_stmt ::= GO expression;


opt_assign ::= EQUAL
    |;
opt_assign_exp_list ::= EQUAL expression_list
           |;

// STRUCT STATEMENT
struct_type     ::= STRUCT LBRACE field_decl_star1 RBRACE;
field_decl_star1 ::= field_decl_star1 field_decl SEMICOLON |;
field_decl      ::= aux_field_decl_1 aux_field_decl_2;

aux_field_decl_1 ::= IDENTIFIER aux_field_decl_3| BLANK_IDENTIFIER aux_field_decl_4 | embedded_field_1;
aux_field_decl_3 ::= identifier_star_1 type  | DOT IDENTIFIER |;
aux_field_decl_4 ::= identifier_star_1 type ;
aux_field_decl_2 ::= | tag;

tag ::= STRING_LITERAL;

embedded_field_1 ::= MULT type_name;
opt_mul ::= MULT |;

identifier_list ::= identifier identifier_star_1;
identifier_star_1 ::= COMMA identifier identifier_star_1 |;

type_star ::= type  type_star |;
type  ::= type_name
         | type_lit | LPAREN type  RPAREN;

type_name     ::= IDENTIFIER aux_type_name_1
                 | BLANK_IDENTIFIER;

aux_type_name_1 ::= DOT IDENTIFIER
                 |;

type_lit     ::= array_type | pointer_type | slice_type | map_type | channel_type | struct_type | interface_type | function_type;

// ARRAY
array_length ::= expression;
array_type   ::= LBRACK array_length RBRACK element_type;
element_type ::= type ;

pointer_type ::= MULT base_type;
base_type    ::= type ;

// FUNCTION
function_type     ::= FUNC signature;
signature        ::= parameters aux_result;

aux_result        ::= result
                     |;

result         ::= HASH LPAREN aux_result_2 RPAREN
                  | type_lit 
                  | type_name;   
aux_result_2     ::= identifier aux_result_3 | type_lit | LPAREN type  RPAREN;
aux_result_3     ::= identifier_star_3 | DOT identifier;

parameters          ::= LPAREN aux_parameters_1 RPAREN;
aux_parameters_1      ::= parameter_list
                        |;

opt_comma            ::= COMMA |;

parameter_list       ::= parameter_decl;

type_no_identifier    ::= type_lit | LPAREN type  RPAREN;
parameter_decl       ::= identifier_list_param |
         SUSPOINTS type  parameter_decl_star |
         type_no_identifier:t parameter_decl_star;

parameter_decl_star   ::= COMMA parameter_decl | COMMA | ;
identifier_list_param ::= identifier identifier_star_2;
identifier_star_2     ::= COMMA identifier identifier_star_2
                        | SUSPOINTS type  parameter_decl_star
                        | type :t parameter_decl_star;

func_identifier_list     ::= identifier func_identifier_list_aux_1;
func_identifier_list_aux_1 ::= func_identifier_list_aux_1 COMMA identifier |;

// INTERFACE
interface_type      ::= INTERFACE LBRACE aux_inteface_type_1 RBRACE;
aux_inteface_type_1   ::= aux_inteface_type_1 method_spec SEMICOLON |;
method_spec         ::= IDENTIFIER method_spec_aux_1;
method_spec_aux_1     ::= signature | method_spec_aux_2;
method_spec_aux_2     ::= DOT IDENTIFIER |;

// SLICE
slice_type ::= LBRACK RBRACK element_type;

// MAP
map_type     ::= MAP LBRACK key_type RBRACK element_type;
key_type     ::= type;

// CHANNEL
channel_type     ::= aux_channel_type_1 element_type;
aux_channel_type_1 ::= CHAN | CHAN CHANNEL | CHANNEL CHAN;


